
&НаКлиенте 
Перем ФормаДлительногоОжидания;

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста 
Функция ВерсияАвтор()
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Версия '"));
	МассивСтрок.Добавить("3.1 final");
	МассивСтрок.Добавить(НСтр("ru=' от '"));
	МассивСтрок.Добавить("25.12.2022");
	МассивСтрок.Добавить(НСтр("ru=' г. '"));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Анисков А.А. (vandalsvq)'"),,,, "https://infostart.ru/profile/15675/"));
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
КонецФункции

&НаСервере 
Процедура ИнициализацияФормы()
	ОбработкаОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Объект");
	ЭтотОбъект.ИдентификаторыОбъектов		= ОбработкаОбъект.ИдентификаторыМетаданных();
	ЭтотОбъект.НастройкаЧтенияМетаданных	= ОбработкаОбъект.СтруктураМетаданных();
	ЭтотОбъект.НастройкаРасширенийОбъектов	= ОбработкаОбъект.РасширенияОбъектов();
	ЭтотОбъект.ПиктограммыПоТипуФайлов		= ОбработкаОбъект.ПиктограммыПоТипуФайлов();
	
	КэшИмен = Новый Соответствие;
	Для Каждого КлючИЗначение Из ЭтотОбъект.ИдентификаторыОбъектов Цикл
		КэшИмен.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;

	// связь владельца с наименованием
	Для Каждого КлючИЗначение Из ЭтотОбъект.НастройкаЧтенияМетаданных Цикл
		СтрокаТаблицы = ЭтотОбъект.СтруктураМетаданных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, КлючИЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	#Область Наборы
	
	Если ИмяРеквизита = "РеквизитыПодробно" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "СтраницыИнформация");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "СтраницаПодробно");
	КонецЕсли;
  	
	Если ИмяРеквизита = "РеквизитыДокументЗагружен" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "КомандаПодсвечиватьЗапросы");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "КомандаКартаКода");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "КомандаСтрокаСостояния");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "КомандаТема");
	КонецЕсли;

	#КонецОбласти
	
	#Область Элементы
	
	Если ИмяРеквизита = "СтраницыИнформация" Тогда
		РежимОтображения = ?(Элементы.ФормаПоказыватьПодробно.Пометка, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СтраницыИнформация", "ОтображениеСтраниц", РежимОтображения);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СтраницыИнформация", "ТекущаяСтраница", Элементы.СтраницаДеревоМетаданных);
	КонецЕсли;
	
	Если ИмяРеквизита = "СтраницаПодробно" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СтраницаПодробно", "Видимость", Элементы.ФормаПоказыватьПодробно.Пометка);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ТабЧасть_Имя
	
	//Если ИмяРеквизита = "ИмяТабличнойЧастиОтветственный" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"ИмяТабличнойЧастиОтветственный", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти
	
	#Область Команды
 	
	Если ИмяРеквизита = "КомандаПодсвечиватьЗапросы" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ПодсвечиватьЗапросы", "Доступность",
			Форма.кк_ДокументЗагружен);
	КонецЕсли;
 	
	Если ИмяРеквизита = "КомандаКартаКода" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КартаКода", "Доступность",
			Форма.кк_ДокументЗагружен);
	КонецЕсли;
 	
	Если ИмяРеквизита = "КомандаСтрокаСостояния" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СтрокаСостояния", "Доступность",
			Форма.кк_ДокументЗагружен);
	КонецЕсли;
 	
	Если ИмяРеквизита = "КомандаТема" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Тема", "Доступность",
			Форма.кк_ДокументЗагружен);
	КонецЕсли;
 	
	#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = "")

	Если ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Массив") Тогда
		МассивИмен = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаРеквизитов);
	Иначе
		Возврат;
	КонецЕсли;
 
	//Форма.ТолькоПросмотр = (Форма.СостоянияЗаблокировано.Найти(Форма.СведенияОЗаявкеСостояние) <> Неопределено);

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьЗаголовокДекорацииНаличиеУтилит(Форма, знач ПриОткрытии = Ложь)
	МассивСтрок = Новый Массив;
	
	Если Форма.УтилитыСуществуют Тогда
		МассивСтрок.Добавить(НСтр("ru='Все необходимые утилиты созданы.'"));
	Иначе 
		МассивСтрок.Добавить(НСтр("ru='Утилиты не найдены.'"));
		
		Если ПриОткрытии Тогда
			МассивСтрок.Добавить(НСтр("ru=' Выполняется операция их создания.'")); 
		Иначе 
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Нажмите для создания'"),,,, "СозданиеУтилит"));
		КонецЕсли;
	КонецЕсли;
	
	Форма.НадписьНаличиеУтилит = Новый ФорматированнаяСтрока(МассивСтрок);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьЗаголовокИнформацияОРелизе(Форма)
	Шрифт_Ж = Новый Шрифт(Форма.Элементы.ИнформацияТекущийРелиз.Шрифт,,, Истина);
	
	МассивИнфоТекРелиз		= Новый Массив;
	МассивИнфоПредРелизы	= Новый Массив;
	
	Если Форма.ЭтоФайлОбновления И Форма.РелизыОснования.Количество() > 1 Тогда
		МассивИнфоПредРелизы.Добавить(НСтр("ru='Поддерживаемые релизы: '"));
	ИначеЕсли Форма.ЭтоФайлРасширения Тогда
		
	КонецЕсли;
	
	Счетчик = 0;
	Для Каждого СтрокаРелиза Из Форма.РелизыОснования Цикл
		Если СтрокаРелиза.Текущий Тогда
			Если Форма.ЭтоФайлРасширения Тогда
				МассивИнфоТекРелиз.Добавить(НСтр("ru='Расширение конфигурации: '"));
			Иначе 
				МассивИнфоТекРелиз.Добавить(НСтр("ru='Обновление конфигурации: '"));
			КонецЕсли;
			
			МассивИнфоТекРелиз.Добавить(Новый ФорматированнаяСтрока(СтрокаРелиза.Имя, Шрифт_Ж, WebЦвета.ТемноСиний));
			МассивИнфоТекРелиз.Добавить(СтрШаблон(НСтр("ru=' (%1). '"), СтрокаРелиза.Поставщик));
			МассивИнфоТекРелиз.Добавить(СтрШаблон(НСтр("ru='Версия: %1'"), СтрокаРелиза.Версия)); 
		Иначе
			Счетчик = Счетчик + 1;
			Если Счетчик > 1 Тогда
				МассивИнфоПредРелизы.Добавить("; ");
			КонецЕсли;
			МассивИнфоПредРелизы.Добавить(СтрокаРелиза.Версия);
		КонецЕсли;
	КонецЦикла;
	
	Форма.ИнформацияТекущийРелиз			= Новый ФорматированнаяСтрока(МассивИнфоТекРелиз);
	Форма.ИнформацияПоддерживаемыеРелизы	= Новый ФорматированнаяСтрока(МассивИнфоПредРелизы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФайлуCFUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяРеквизита", "ПутьКФайлу");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогВыбораФайлаЗавершение", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр			= НСтр("ru='Файлы обновлений (*.cfu) или расширения (*.cfe) конфигураций'") + "|*.cfu;*.cfe";
	ДиалогВыбора.ПолноеИмяФайла	= Объект.ПутьКФайлу;
	ДиалогВыбора.Заголовок		= НСтр("ru='Выберите файл обновления или расширения конфигурации'");
	ДиалогВыбора.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КаталогРаспаковкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяРеквизита", "КаталогРаспаковки");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогВыбораФайлаЗавершение", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.ПолноеИмяФайла	= Объект.КаталогРаспаковки;
	ДиалогВыбора.Заголовок		= НСтр("ru='Выберите каталог для распаковки файла обновления'");
	ДиалогВыбора.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КаталогРаспаковкиОчистка(Элемент, СтандартнаяОбработка)
	Объект.КаталогРаспаковки = "";
КонецПроцедуры

&НаКлиенте
Процедура КаталогРаспаковкиОткрытие(Элемент, СтандартнаяОбработка)
	Если ПустаяСтрока(Объект.КаталогРаспаковки) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапуститьПриложение(Объект.КаталогРаспаковки);
КонецПроцедуры

&НаКлиенте
Процедура НадписьНаличиеУтилитНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПроверитьНаличиеУтилит();
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLДокументСформирован(Элемент)
	
	Если ЭтотОбъект.кк_ИсходникиЗагружены Тогда
		ЭтотОбъект.кк_ДокументЗагружен = Истина;
		
		ИнициализацияРедактора();
		
		УправлениеВидимостьюСтрокиСостояния();
		УправлениеВидимостьюПробеловТабуляций();
	КонецЕсли;
	
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыДокументЗагружен");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ТекстовыйДокумент.Очистить();
	
	Если ТекущиеДанные.Тип = "МОД" Тогда
		ОтобразитьСодержимоеПакета(ТекущиеДанные, "text");
	ИначеЕсли ТекущиеДанные.Тип = "Ф" Тогда
		ОтобразитьСодержимоеПакета(ТекущиеДанные, "form");
	ИначеЕсли ТекущиеДанные.Тип = "М" Тогда
		ОтобразитьСодержимоеПакета(ТекущиеДанные, "text");
	ИначеЕсли ТекущиеДанные.Тип = "МФ" Тогда
		ОтобразитьСодержимоеМодуляФормы(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Тип = "С" Тогда
		ОтобразитьСодержимоеСправки(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Тип = "К" Тогда
		ОтобразитьСодержимоеКартинки(ТекущиеДанные);
	Иначе
		ОтобразитьДанныеСтрокиДерева(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаМетаданных

&НаКлиенте
Процедура ТаблицаМетаданныхПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаМетаданных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтраниц = СтрРазделить("Расширения,Измерения,Ресурсы,Реквизиты,ТабличныеЧасти"
		+ ",Формы,Макеты,Команды,Перерасчеты,Значения", ",", Ложь);
		
	Для Каждого ИмяСтраницы Из МассивСтраниц Цикл
		КолСтрок = ТекущиеДанные[ИмяСтраницы].Количество();
		ЭтотОбъект["Заголовок" + ИмяСтраницы] = Формат(КолСтрок, "ЧН=0; ЧГ=");
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтотОбъект.ВерсияАвтор = ВерсияАвтор();
	
	Объект.ПутьКФайлу			= Параметры.ПутьКФайлу;
	Объект.КаталогРаспаковки	= Параметры.КаталогРаспаковки;
	ЭтотОбъект.ТолькоОбъекты	= Параметры.ТолькоОбъекты;
	
	ДанныеИсходников = ПолучитьИсходникиКонсолиНаСервере();
	
	ЭтотОбъект.кк_АдресМакета		= ПоместитьВоВременноеХранилище(ДанныеИсходников, ЭтотОбъект.УникальныйИдентификатор);
	ЭтотОбъект.кк_ВерсияОбработки	= "20221014";
	
	ИнициализацияФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ЭтотОбъект.ЭтоВебКлиент	= Истина;    	
	#КонецЕсли
	
	ЭтотОбъект.ПутьКUnpackV8 = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), "unpackv8.exe");
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогРаспаковки) Тогда
		Объект.КаталогРаспаковки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), "cfu_unpack");
	КонецЕсли;
	
	УстановитьЗаголовокДекорацииНаличиеУтилит(ЭтотОбъект, Истина);
	УстановитьУсловноеОформление(ЭтотОбъект);
	
	Если Параметры.ПолучитьДанныеCFU Тогда
		Если ПустаяСтрока(Объект.ПутьКФайлу) Тогда
			ВызватьИсключение НСтр("ru='Не указан путь к файлу CFU'");
		ИначеЕсли ПустаяСтрока(Объект.КаталогРаспаковки) Тогда
			ВызватьИсключение НСтр("ru='Не указан путь к каталогу распаковки'");
		ИначеЕсли НЕ СтрЗаканчиваетсяНа(Объект.ПутьКФайлу, ".cfu") Тогда
			ВызватьИсключение НСтр("ru='Указанный файл, не является обновлением (*.cfu)'");
		КонецЕсли;
		
		ПолучитьДанныеCFU();
	Иначе 
		ПроверитьНаличиеУтилит(Истина);
	КонецЕсли; 
	
	Если НЕ ЭтотОбъект.ЭтоВебКлиент Тогда
		УстановитьПометкуТемы("СветлаяТема");
		ИзвлечьИсходники();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Ждать УдалитьФайлыАсинх(Объект.КаталогРаспаковки);

	ЭтотОбъект.ТекстHTML = "";
	
	Попытка
		Ждать УдалитьФайлыАсинх(ЭтотОбъект.кк_ИндексныйФайл);
	Исключение
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура РаспаковатьИВывести(Команда)
	Если ЭтотОбъект.УтилитыСуществуют = Ложь Тогда
		ПоказатьПредупреждение(, НСтр("ru='Утилиты не обнаружены. Необходимо повторить операцию сохранения утилит.'"), 60);
		Возврат;
	КонецЕсли;
	
	Ждать РаспаковатьИВывестиАсинх();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПодробно(Команда)
	Элементы.ФормаПоказыватьПодробно.Пометка = НЕ Элементы.ФормаПоказыватьПодробно.Пометка;
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыПодробно");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнфостартНажатие(Элемент)
	ЗапуститьПриложение("https://infostart.ru/public/1081012/");
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

// часть обработок завершения находится в областях, где находится инициатор оповещения

&НаКлиенте
Процедура ДиалогВыбораФайлаЗавершение(Результат, ДопПараметры) Экспорт	
	Если НЕ ТипЗнч(Результат) = Тип("Массив") ИЛИ Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ДопПараметры.ИмяРеквизита] = Результат[0];
	
	Если ДопПараметры.Свойство("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОповещения, Результат);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура ОтобразитьДанныеСтрокиДерева(СтрокаДерева)
	ТипыТХТ = СтрРазделить("ТХТ,М,Р,КМ,КИ,РС,ПП,РО", ",", Ложь);
	
	ТекущаяСтраница = Элементы.ГруппаТекст;
	
	Если НЕ ПустаяСтрока(СтрокаДерева.ТекстДляОтображения) Тогда
		Если СтрокаДерева.ЭтоТекстМодуля И ЭтотОбъект.ИспользоватьКонсольКода Тогда
			ОчиститьТекстКонсоли();
			УстановитьТекстКонсоли(СтрокаДерева.ТекстДляОтображения, Неопределено, Ложь);
			
			ТекущаяСтраница = Элементы.ГруппаКонсольКода;
		Иначе 
			ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(СтрокаДерева.ТекстДляОтображения);
		КонецЕсли;
	ИначеЕсли СтрокаДерева.Тип = "С" Тогда
		ТекстСправки = ПрочитатьДанныеФайла(СтрокаДерева.ПутьКФайлуТХТ);
		ЭтотОбъект.ДокументHTML = ТекстСправки;
		ТекущаяСтраница = Элементы.ГруппаHTML;
	ИначеЕсли СтрокаДерева.Тип = "К" Тогда
		ЭтотОбъект.ХранилищеКартинки = СтрокаДерева.ПутьКФайлуТХТ;
		ТекущаяСтраница = Элементы.ГруппаКартинка;
	ИначеЕсли СтрокаДерева.Тип = "КМ" Тогда
		ЭтотОбъект.ГрафическаяСхема.Прочитать(СтрокаДерева.ПутьКФайлу);
		ТекущаяСтраница = Элементы.ГруппаКартаМаршрута;
	ИначеЕсли СтрокаДерева.Тип = "М" Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.ПутьКФайлуТХТ) Тогда
			ЭтотОбъект.ТабличныйДокумент = ПолучитьИзВременногоХранилища(СтрокаДерева.ПутьКФайлуТХТ);
			ТекущаяСтраница = Элементы.ГруппаТабДокумент;
		Иначе 
			ЭтотОбъект.ТекстовыйДокумент.Прочитать(СтрокаДерева.ПутьКФайлу);
		КонецЕсли;
	ИначеЕсли НЕ ПустаяСтрока(СтрокаДерева.ПутьКФайлуТХТ) Тогда
		Если СтрокаДерева.Тип = "МОД" И ЭтотОбъект.ИспользоватьКонсольКода Тогда
			ТекстФайла = ПрочитатьДанныеФайла(СтрокаДерева.ПутьКФайлуТХТ);
			ТекстФайла = СокрЛП(ТекстФайла);
			
			ОчиститьТекстКонсоли();
			УстановитьТекстКонсоли(ТекстФайла, Неопределено, Ложь);
			
			ТекущаяСтраница = Элементы.ГруппаКонсольКода;
		Иначе 
			ЭтотОбъект.ТекстовыйДокумент.Прочитать(СтрокаДерева.ПутьКФайлуТХТ);
		КонецЕсли;
	ИначеЕсли НЕ ПустаяСтрока(СтрокаДерева.ПутьКФайлу) Тогда
		ЭтотОбъект.ТекстовыйДокумент.Прочитать(СтрокаДерева.ПутьКФайлу);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаОтображениеДанных", "ТекущаяСтраница", ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРелизыОснования(знач МассивИнформации)
	// 1-й элемент: число - возможно версия платформы
	// 2-й элемент: число - количество релизов оснований
	ЧислоОснований = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивИнформации[1]);
	
	// найдем информацию о текущем релизе
	ПозицияИдентификатора = МассивИнформации.Количество() - 4;
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(МассивИнформации[ПозицияИдентификатора]) Тогда
		ИндексПозицииТекРелиза = ПозицияИдентификатора;
	КонецЕсли;
	
	// если индекс не определен, попробуем найти пустой идентификатор, такое бывает
	Если ИндексПозицииТекРелиза = Неопределено Тогда
		ГраницаМассива = МассивИнформации.ВГраница();
		Для ИндексЗначения = 0 По ГраницаМассива Цикл
			ЗначениеМассива = МассивИнформации[ГраницаМассива - ИндексЗначения];
			Если ЗначениеМассива = ПустойИдентификатор() Тогда
				ИндексПозицииТекРелиза = ГраницаМассива - ИндексЗначения;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//ИндексПозицииТекРелиза = МассивИнформации.Найти(ПустойИдентификатор());
	КонецЕсли;
	
	Если ИндексПозицииТекРелиза <> Неопределено Тогда
		ПозицияНачалаРасчета = ИндексПозицииТекРелиза - 1;
		Пока НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(МассивИнформации[ПозицияНачалаРасчета]) Цикл
			ПозицияНачалаРасчета = ПозицияНачалаРасчета - 1;
		КонецЦикла;
		
		ДанныеКонфигурации = ПрочитатьДанныеКонфигурации(МассивИнформации, ПозицияНачалаРасчета + 1);
		
		СтрокаРелиза = ЭтотОбъект.РелизыОснования.Добавить();
		СтрокаРелиза.Текущий		= Истина;
		СтрокаРелиза.Имя			= ОчиститьЛишниеСкобки(ДанныеКонфигурации.Имя);
		СтрокаРелиза.Поставщик		= ОчиститьЛишниеСкобки(ДанныеКонфигурации.Поставщик);
		СтрокаРелиза.Версия			= ОчиститьЛишниеСкобки(ДанныеКонфигурации.Версия);
		СтрокаРелиза.Идентификатор	= ДанныеКонфигурации.Идентификатор;
		
		ЭтотОбъект.ИмяКонфигурации	= СтрокаРелиза.Имя;
	КонецЕсли;	
	
	// каждое обновление - Имя конфигурации, Поставщик, Версия, Идентификатор
	ПредыдущийИдентификатор = "";
	Для Индекс = 0 По ЧислоОснований-1 Цикл
		Если Индекс = 0 Тогда
			ДанныеКонфигурации = ПрочитатьДанныеКонфигурации(МассивИнформации, 2);
		Иначе 
			ПозицияИдентификатор = МассивИнформации.Найти(ПредыдущийИдентификатор);
			Если ПозицияИдентификатор = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДанныеКонфигурации = ПрочитатьДанныеКонфигурации(МассивИнформации, ПозицияИдентификатор);
		КонецЕсли;
		
		СтрокаРелиза = ЭтотОбъект.РелизыОснования.Добавить();
		СтрокаРелиза.Имя			= ОчиститьЛишниеСкобки(ДанныеКонфигурации.Имя);
		СтрокаРелиза.Поставщик		= ОчиститьЛишниеСкобки(ДанныеКонфигурации.Поставщик);
		СтрокаРелиза.Версия			= ОчиститьЛишниеСкобки(ДанныеКонфигурации.Версия);
		СтрокаРелиза.Идентификатор	= ДанныеКонфигурации.Идентификатор;
		
		ПредыдущийИдентификатор = ДанныеКонфигурации.Идентификатор;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьРелизыРасширения(знач КонфигурацияИнфо)
	Позиция10 = СтрНайти(КонфигурацияИнфо, "{",,, 10);
	Если Позиция10 = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Позиция11 = СтрНайти(КонфигурацияИнфо, "{",, Позиция10 + 1);
	Позиция12 = СтрНайти(КонфигурацияИнфо, "{",, Позиция11 + 1);
	Позиция14 = СтрНайти(КонфигурацияИнфо, "{",, Позиция12 + 1, 2);
	Позиция15 = СтрНайти(КонфигурацияИнфо, "{",, Позиция14 + 1);
	
	БлокПодробнаяИнформация	= ПрочитатьИнформационныйБлок(КонфигурацияИнфо, Позиция10);
	БлокКраткаяИнформация	= ПрочитатьИнформационныйБлок(КонфигурацияИнфо, Позиция11);
	БлокАвтор				= ПрочитатьИнформационныйБлок(КонфигурацияИнфо, Позиция12);
	БлокДопДанные			= Сред(КонфигурацияИнфо, позиция14, Позиция15 - Позиция14 - 1);
	
	МассивДопДанные = СтрРазделить(БлокДопДанные, ",");
	Если МассивДопДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Индекс1 = 8;
	Индекс2 = 9;
	Если МассивДопДанные[0] = "{0}" Тогда
		Индекс1 = Индекс1 - 2;
		Индекс2 = Индекс2 - 2;
	КонецЕсли;
	
	БлокКраткаяИнформация = СтрЗаменить(БлокКраткаяИнформация, "{", "");
	БлокКраткаяИнформация = СтрЗаменить(БлокКраткаяИнформация, "}", "");
	ИменаКонфигурации = СтрРазделить(БлокКраткаяИнформация, ",");
	
	СтрПоставщик	= ?(МассивДопДанные.Количество() > Индекс1, МассивДопДанные[Индекс1], "");
	СтрВерсия		= ?(МассивДопДанные.Количество() > Индекс2, МассивДопДанные[Индекс2], "");
	
	СтрокаРелиза = ЭтотОбъект.РелизыОснования.Добавить();
	СтрокаРелиза.Имя			= ?(ИменаКонфигурации.Количество() > 2, ИменаКонфигурации[2], "");
	СтрокаРелиза.Поставщик		= ОчиститьЛишниеСкобки(СтрПоставщик);
	СтрокаРелиза.Версия			= ОчиститьЛишниеСкобки(СтрВерсия);
	СтрокаРелиза.Идентификатор	= "";
	СтрокаРелиза.Текущий		= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОчисткуДанныхФормы() Экспорт
	ЭтотОбъект.ДеревоМетаданных.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.РелизыОснования.Очистить();
	ЭтотОбъект.ТаблицаМетаданных.Очистить();
	
	ЭтотОбъект.ТекстовыйДокумент	= "";
	ЭтотОбъект.ДокументHTML			= "";
	ЭтотОбъект.ХранилищеКартинки	= "";
	ЭтотОбъект.ИмяКонфигурации		= "";
	
	ОчиститьТекстКонсоли();
КонецПроцедуры

&НаКлиенте 
Функция ПрочитатьДанныеКонфигурации(знач МассивИнформации, знач ПозицияНачалаРасчета)
	СтруктураИнформации = Новый Структура("Имя, Поставщик, Версия, Идентификатор", "", "", "", "");
	
	КоличествоПозиций = МассивИнформации.Количество();
	
	// определим имя конфигурации
	ПозицияИмяКонфигурации = ПозицияНачалаРасчета;
	Пока СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(МассивИнформации[ПозицияИмяКонфигурации]) Цикл
		Если ПозицияИмяКонфигурации >= КоличествоПозиций Тогда
			ПозицияИмяКонфигурации = 0;
			Прервать;
		КонецЕсли;
		
		ПозицияИмяКонфигурации = ПозицияИмяКонфигурации + 1;
	КонецЦикла;
	
	// если позиция имени не определена возвращаем пустую структуру
	Если ПозицияИмяКонфигурации = 0 Тогда
		Возврат СтруктураИнформации;
	КонецЕсли;
	
	// определим идентификатор конфигурации
	ПозицияИдентификатор = ПозицияИмяКонфигурации + 1;
	Пока НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(МассивИнформации[ПозицияИдентификатор]) Цикл
		Если ПозицияИдентификатор >= КоличествоПозиций Тогда
			ПозицияИдентификатор = 0;
			Прервать;
		КонецЕсли;
		
		ПозицияИдентификатор = ПозицияИдентификатор + 1;
	КонецЦикла;
	
	// если позиция имени не определена возвращаем пустую структуру
	Если ПозицияИмяКонфигурации = 0 Тогда
		Возврат СтруктураИнформации;
	КонецЕсли;
	
	// перед идентификатором номер конфигурации
	СтруктураИнформации.Имя				= МассивИнформации[ПозицияИмяКонфигурации];
	СтруктураИнформации.Идентификатор	= МассивИнформации[ПозицияИдентификатор];
	СтруктураИнформации.Версия			= МассивИнформации[ПозицияИдентификатор-1];
	
	// представление поставщика
	МассивПредставление = Новый Массив;
	Для Индекс = ПозицияИмяКонфигурации + 1 По ПозицияИдентификатор - 2 Цикл
		МассивПредставление.Добавить(МассивИнформации[Индекс]);
	КонецЦикла;
	
	СтруктураИнформации.Поставщик = СтрСоединить(МассивПредставление, ",");
	
	Возврат СтруктураИнформации;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПиктограммаПоТипу(знач Форма, знач Тип)
	ИндексКартинки = Форма.ПиктограммыПоТипуФайлов.Получить(Тип);
	Если ИндексКартинки = Неопределено Тогда
		ИндексКартинки = -1;
	КонецЕсли;
	
	Возврат ИндексКартинки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПустойИдентификатор()
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ОчиститьЛишниеСкобки(знач СтрЗначение)
	СтрЗначение = СтрЗаменить(СтрЗначение, """""", """");
	СтрЗначение = ?(Лев(СтрЗначение, 1) = """", Сред(СтрЗначение, 2), СтрЗначение);
	возврат ?(Прав(СтрЗначение, 1) = """", Лев(СтрЗначение, СтрДлина(СтрЗначение)-1), СтрЗначение);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПрочитатьДанныеФайла(знач ПутьКФайлу, знач Кодировка = Неопределено)
	Если Кодировка = Неопределено Тогда
		Кодировка = КодировкаТекста.ANSI;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, Кодировка);
	ДанныеФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	ЧтениеТекста = Неопределено;
	
	Возврат ДанныеФайла;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПрочитатьИмяСинонимОбъекта(знач ДанныеОбъекта, знач ИдентификаторОбъекта)
	МассивИнформацияОбъекта	= СтрРазделить(ДанныеОбъекта, ",", Ложь);
	КолЗаписейИнформации	= МассивИнформацияОбъекта.Количество();
	ИндексИдентификатора	= МассивИнформацияОбъекта.Найти(ИдентификаторОбъекта + "}");
	
	ИмяСиноним = Новый Структура("Имя, Синоним", "", "");
	
	// Имя, Представление
	Если ИндексИдентификатора <> Неопределено И ИндексИдентификатора + 1 <= КолЗаписейИнформации Тогда
		ИмяСиноним.Имя = ОчиститьЛишниеСкобки(МассивИнформацияОбъекта[ИндексИдентификатора + 1]);
		
		ПредставлениеОбъекта = "";
		Если СокрЛП(МассивИнформацияОбъекта[ИндексИдентификатора + 2]) <> "{0}" И ИндексИдентификатора + 4 <= КолЗаписейИнформации Тогда
			ПредставлениеОбъекта = МассивИнформацияОбъекта[ИндексИдентификатора + 4];
			Если НЕ ПустаяСтрока(ПредставлениеОбъекта) И ПредставлениеОбъекта <> "0" Тогда
				ПредставлениеОбъекта = СтрЗаменить(ПредставлениеОбъекта, "}", "");
			КонецЕсли;
		КонецЕсли;
		
		ИмяСиноним.Синоним = ОчиститьЛишниеСкобки(ПредставлениеОбъекта);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяСиноним.Синоним) Тогда
		ИмяСиноним.Синоним = ИмяСиноним.Имя;
	КонецЕсли;
	
	Возврат ИмяСиноним;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПрочитатьИмяСинонимРасширения(знач ДанныеОбъекта)
	ДанныеОбъекта	= СтрЗаменить(ДанныеОбъекта, "{", "");
	ДанныеОбъекта	= СтрЗаменить(ДанныеОбъекта, "}", "");
	ПодстрокиБлока	= СтрРазделить(ДанныеОбъекта, ",");
	
	ИмяСиноним = Новый Структура("Имя,Синоним", "", "");
	ИмяСиноним.Имя		= ?(ПодстрокиБлока.Количество() > 4, ОчиститьЛишниеСкобки(ПодстрокиБлока[4]), "");
	ИмяСиноним.Синоним	= ?(ПодстрокиБлока.Количество() > 7, ОчиститьЛишниеСкобки(ПодстрокиБлока[7]), "");
	
	Возврат ИмяСиноним;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НайтиПодчиненныеОбъектыПоИдентификатору(знач ДанныеОбъекта, знач ИдентификаторВладелец)
	// ищем строку "{Ключ"
	НачалоСтроки = СтрНайти(ДанныеОбъекта, "{" + ИдентификаторВладелец);
	Если НачалоСтроки = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// ищем окончение строки "}" и обрезаем строку
	КонецСтроки		= СтрНайти(ДанныеОбъекта, "}",, НачалоСтроки + 1);
	СтрокаОбъекты	= Сред(ДанныеОбъекта, НачалоСтроки + 1, КонецСтроки - НачалоСтроки - 1);
	
	// разбираем строку на части
	МассивОбъекты = СтрРазделить(СтрокаОбъекты, ",", Ложь);
	Если МассивОбъекты.Количество() >= 2 Тогда
		МассивОбъекты.Удалить(1);
		МассивОбъекты.Удалить(0);
	КонецЕсли;
	
	Возврат МассивОбъекты;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НайтиПодчиненныеКомандыПоИдентификатору(знач ДанныеОбъекта, знач ИдентификаторВладелец)
	// ищем строку "{Ключ"
	НачалоСтроки = СтрНайти(ДанныеОбъекта, "{" + ИдентификаторВладелец);
	Если НачалоСтроки = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МассивОбъекты = Новый Массив;
	
	НачалоКоманды = СтрНайти(ДанныеОбъекта, "{2,",, НачалоСтроки + 1);
	Пока НачалоКоманды > 0 Цикл
		ИдентификаторКоманды = Сред(ДанныеОбъекта, НачалоКоманды + 3, 36);
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторКоманды) Тогда
			МассивОбъекты.Добавить(ИдентификаторКоманды);
		КонецЕсли;
		
		НачалоКоманды = СтрНайти(ДанныеОбъекта, "{2,",, НачалоКоманды + 1);
	КонецЦикла;
	
	Возврат МассивОбъекты;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПрочитатьИнформационныйБлок(знач ДанныеОбъекта, знач ПозицияНачала, ПозицияКонец = 0)
	Ограничение = СтрДлина(ДанныеОбъекта);
	
	НачБлока = ПозицияНачала;
	КонБлока = 0;
	
	ОткрытаСтрока = Ложь;
	СчетчикГраницБлока = Неопределено;
	Для Индекс = ПозицияНачала По Ограничение Цикл
		ИзменениеСчетчика = 0;
		
		ЗначСимвол = Сред(ДанныеОбъекта, Индекс, 1);
		Если ЗначСимвол = "{" Тогда
			ИзменениеСчетчика = +1;
		ИначеЕсли ЗначСимвол = "}" Тогда
			ИзменениеСчетчика = -1;
		ИначеЕсли ЗначСимвол = """" Тогда
			Если Сред(ДанныеОбъекта, Индекс + 1, 1) = """" И ОткрытаСтрока Тогда
				Индекс = Индекс + 1;
			КонецЕсли;
			ОткрытаСтрока = НЕ ОткрытаСтрока;
		Иначе 
			Продолжить;
		КонецЕсли;
		
		Если ИзменениеСчетчика = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетчикГраницБлока = Неопределено И ИзменениеСчетчика <> 0 Тогда
			СчетчикГраницБлока = 0;
			НачБлока = Индекс;
		КонецЕсли;
		 
		СчетчикГраницБлока = СчетчикГраницБлока + ИзменениеСчетчика; 
		
		Если СчетчикГраницБлока <= 0 Тогда
			КонБлока = Индекс + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КонБлока = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияКонец = КонБлока;
	
	Возврат СокрЛП(Сред(ДанныеОбъекта, НачБлока, КонБлока - НачБлока));
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПрочитатьИнформационныйБлокПоКлючу(знач ДанныеОбъекта, знач Ключ)
	ПозицияНачало = СтрНайти(ДанныеОбъекта, "{" + Ключ + ",");
	Если ПозицияНачало = 0 Тогда
		Возврат "";
	Иначе 
		Возврат ПрочитатьИнформационныйБлок(ДанныеОбъекта, ПозицияНачало);
	КонецЕсли;
КонецФункции

&НаСервере 
Функция СформироватьТабличныйДокументНаСервере(знач АдресХранилища)
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ВременныйФайл);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ВременныйФайл);
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьUnpackV8НаСервере()
	ОбработкаОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("v8unpack"); //"UnpackV8_Viewer"
КонецФункции

&НаСервере
Функция ПолучитьИсходникиКонсолиНаСервере()
	ОбработкаОбъект = ЭтотОбъект.РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("src");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПолучитьДанныеCFU

&НаКлиенте
Асинх Процедура ПолучитьДанныеCFU()
	
	// открываем форму и запускаем все остальные пункты
	ФормаДлительногоОжидания = ОткрытьФорму("Обработка.ОбработкаЧтенияCFU_E.Форма.ФормаОжидания",,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	// выполняем обработку
	ФайлСуществует = Ждать ПроверитьUnpackV8Асинх();
	Если НЕ ФайлСуществует Тогда
		РезультатВыполнения = ПолучитьСтруктуруРезультатОбработкиПриОткрытии(Ложь, НСтр("ru='Отсутствует утилита v8Unpack.'"));
	Иначе
		РезультатРаспаковки = Ждать РаспаковатьАсинх();
		Если НЕ РезультатРаспаковки.Выполнено Тогда
			РезультатВыполнения = ПолучитьСтруктуруРезультатОбработкиПриОткрытии(Ложь, РезультатРаспаковки.ТекстОшибки);
		Иначе
			ДанныеРаспаковки = ПолучитьДанныеРазбораФайлаCFU();
			РезультатВыполнения = ПолучитьСтруктуруРезультатОбработкиПриОткрытии(Истина, "", ДанныеРаспаковки);
		КонецЕсли;
	КонецЕсли;

	// закрываем форму длительной операции
	Если ТипЗнч(ФормаДлительногоОжидания) = Тип("ФормаКлиентскогоПриложения") И ФормаДлительногоОжидания.Открыта() Тогда
		ФормаДлительногоОжидания.Закрыть();
	КонецЕсли;
	
	// закрываем текущее окно
	ЭтотОбъект.Закрыть(РезультатВыполнения);		
	
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьДанныеРазбораФайлаCFU()
	МассивРелизы		= Новый Массив;
	СоответствиеОбъекты	= Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.РелизыОснования Цикл
		СтруктураСтроки = Новый Структура("Имя, Поставщик, Версия, Идентификатор, Текущий");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы);
		
		МассивРелизы.Добавить(Новый ФиксированнаяСтруктура(СтруктураСтроки));
	КонецЦикла;
	
	СписокТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Формы, Макеты, Команды, Перерасчеты, Реквизиты, ТабличныеЧасти, Значения, Измерения, Ресурсы", ",", Истина, Истина);
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.ТаблицаМетаданных Цикл
		СтруктураДанных = Новый Структура("ИмяРодителя, ВидМетаданных, ПутьКОбъекту, ИмяОбъекта, Представление, Формы, Макеты, Команды, "
			+ "Перерасчеты, Реквизиты, ТабличныеЧасти, Значения, Измерения, Ресурсы");
			
		НастройкаМетаданных = ЭтотОбъект.НастройкаЧтенияМетаданных.Получить(СтрокаТаблицы.ИмяРодителя);	
		Если НастройкаМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных.ИмяРодителя		= НастройкаМетаданных.Наименование;
		СтруктураДанных.ПутьКОбъекту	= СтрШаблон("%1.%2.%3", ЭтотОбъект.ИмяКонфигурации, НастройкаМетаданных.ПутьКОбъекту, СтрокаТаблицы.ИмяОбъекта);
		СтруктураДанных.ВидМетаданных	= НастройкаМетаданных.ВидМетаданных; 
		СтруктураДанных.ИмяОбъекта		= СтрокаТаблицы.ИмяОбъекта;
		СтруктураДанных.Представление	= СтрокаТаблицы.ПредставлениеОбъекта;
		
		Для Каждого ИмяТаблицы Из СписокТаблиц Цикл
			Если ЭтотОбъект.ТолькоОбъекты Тогда
				СтруктураДанных[ИмяТаблицы] = (СтрокаТаблицы[ИмяТаблицы].Количество() > 0);
			Иначе 
				МассивВложений = Новый Массив;
				Для Каждого СтрокаВложенная Из СтрокаТаблицы[ИмяТаблицы] Цикл
					СтруктураВложения = Новый Структура("Идентификатор, Имя, Представление");
					ЗаполнитьЗначенияСвойств(СтруктураВложения, СтрокаВложенная);
					
					МассивВложений.Добавить(Новый ФиксированнаяСтруктура(СтруктураВложения));
				КонецЦикла;
				СтруктураДанных[ИмяТаблицы] = Новый ФиксированныйМассив(МассивВложений);
			КонецЕсли;
		КонецЦикла;
		
		НаборОбъектов = СоответствиеОбъекты.Получить(СтруктураДанных.ВидМетаданных);
		Если НаборОбъектов = Неопределено Тогда
			НаборОбъектов = Новый Массив;
		Иначе 
			НаборОбъектов = Новый Массив(НаборОбъектов);
		КонецЕсли;
		
		НаборОбъектов.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		СоответствиеОбъекты.Вставить(СтруктураДанных.ВидМетаданных, Новый ФиксированныйМассив(НаборОбъектов));
	КонецЦикла;
	
	РезультатРазбора = Новый Структура("Релизы, Объекты",
		Новый ФиксированныйМассив(МассивРелизы),
		Новый ФиксированноеСоответствие(СоответствиеОбъекты));
	
	Возврат Новый ФиксированнаяСтруктура(РезультатРазбора);
КонецФункции

&НаКлиенте 
Функция ПолучитьСтруктуруРезультатОбработкиПриОткрытии(знач Выполнено, знач ОписаниеОшибки = "", знач Результат = Неопределено)
	Возврат Новый ФиксированнаяСтруктура(
		Новый Структура("Выполнено, ОписаниеОшибки, Результат",
			Выполнено,
			ОписаниеОшибки,
			Результат));
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ПостроениеДерева

&НаСервере 
Процедура ПостроитьДеревоМетаданныхНаСервере(СтрокаВладелец = Неопределено, знач ИмяВладелец = "", знач Уровень = 1) Экспорт 
	СтрокиТекУровня = ЭтотОбъект.СтруктураМетаданных.Выгрузить(Новый Структура("Владелец", ИмяВладелец));
	СтрокиТекУровня.Сортировать("Порядок");
	
	Если СтрокаВладелец = Неопределено Тогда
		СтрокаВладелец = ЭтотОбъект.ДеревоМетаданных;
	КонецЕсли;
	
	НаборЭлементов = СтрокаВладелец.ПолучитьЭлементы();
	Для Каждого СтрокаМетаданных Из СтрокиТекУровня Цикл
		НастройкаМетаданных = ЭтотОбъект.НастройкаЧтенияМетаданных.Получить(СтрокаМетаданных.Наименование);
		
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= НастройкаМетаданных.Наименование;
		СтрокаДерева.ИндексКартинки			= НастройкаМетаданных.ИндексКартинки;
		СтрокаДерева.ИдентификаторОбъекта	= "";
		СтрокаДерева.ПредставлениеОбъекта	= НастройкаМетаданных.Синоним;
		СтрокаДерева.Уровень				= Уровень;
		
		ПостроитьДеревоМетаданныхНаСервере(СтрокаДерева, СтрокаДерева.ИмяОбъекта, Уровень + 1);
		ПостроитьДеревоМетаданныхОбъектыНаСервере(СтрокаДерева);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ПостроитьДеревоМетаданныхОбъектыНаСервере(СтрокаВладелец)
	МассивМетаданныхОбъектов = ЭтотОбъект.ТаблицаМетаданных.НайтиСтроки(Новый Структура("ИмяРодителя", СтрокаВладелец.ИмяОбъекта));
	Если МассивМетаданныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИерархияПодсистем = Новый Соответствие;
	
	НаборЭлементов = СтрокаВладелец.ПолучитьЭлементы();
	Для Каждого СтрокаМетаданныхОбъекта Из МассивМетаданныхОбъектов Цикл
		Если НЕ СтрокаВладелец.ИмяОбъекта = "ConfigAttributtes" Тогда
			Если ЗначениеЗаполнено(СтрокаМетаданныхОбъекта.ИдентификаторПодсистемы) Тогда
				ИдентификаторКорень = ИерархияПодсистем.Получить(СтрокаМетаданныхОбъекта.ИдентификаторПодсистемы);
				Если НЕ ИдентификаторКорень = Неопределено Тогда
					СтрокаПодсистема = ЭтотОбъект.ДеревоМетаданных.НайтиПоИдентификатору(ИдентификаторКорень);
					Если НЕ СтрокаПодсистема = Неопределено Тогда
						НаборЭлементов = СтрокаПодсистема.ПолучитьЭлементы();
					КонецЕсли;
				КонецЕсли;
			Иначе 
				НаборЭлементов = СтрокаВладелец.ПолучитьЭлементы();
			КонецЕсли;
			
			СтрокаОбъекта = НаборЭлементов.Добавить();
			СтрокаОбъекта.ИмяОбъекта			= СтрокаМетаданныхОбъекта.ИмяОбъекта;
			СтрокаОбъекта.ИндексКартинки		= СтрокаМетаданныхОбъекта.ИндексКартинки;
			СтрокаОбъекта.ИдентификаторОбъекта	= СтрокаМетаданныхОбъекта.ИдентификаторОбъекта;
			СтрокаОбъекта.ПредставлениеОбъекта	= СтрокаМетаданныхОбъекта.ПредставлениеОбъекта;
			СтрокаОбъекта.ПутьКФайлу			= СтрокаМетаданныхОбъекта.ПутьКФайлу;
			СтрокаОбъекта.Тип					= "ТХТ";
			СтрокаОбъекта.Уровень				= СтрокаВладелец.Уровень + 1;
		Иначе 
			СтрокаОбъекта = СтрокаВладелец;
		КонецЕсли;
		
		Если СтрокаВладелец.ИмяОбъекта = "Subsystems" Тогда
			ИерархияПодсистем.Вставить(СтрокаОбъекта.ИдентификаторОбъекта, СтрокаОбъекта.ПолучитьИдентификатор());
		КонецЕсли;
		
		ПостроитьДеревоМетаданныхРасширенияНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхЗначенияНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхИзмеренияНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхРесурсыНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхРеквизитыНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхТабличныеЧастиНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта); 
		ПостроитьДеревоМетаданныхФормыНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхМакетыНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхКомандыНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
		ПостроитьДеревоМетаданныхПерерасчетыНаСервере(СтрокаОбъекта, СтрокаМетаданныхОбъекта);
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхИзмеренияНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Измерения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИзмерения = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаИзмерения.ИмяОбъекта				= СтрокаВладелец.ИмяОбъекта + "_dimensions";
	СтрокаИзмерения.ИндексКартинки			= 69;
	СтрокаИзмерения.ИдентификаторОбъекта	= "";
	СтрокаИзмерения.ПредставлениеОбъекта	= НСтр("ru='Измерения'");
	СтрокаИзмерения.ПутьКФайлу				= "";
	СтрокаИзмерения.Уровень					= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаИзмерения.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхИзмерение Из СтрокаМетаданных.Измерения Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхИзмерение.Имя;
		СтрокаДерева.ИндексКартинки			= 69;
		СтрокаДерева.ИдентификаторОбъекта	= СтрокаДанныхИзмерение.Идентификатор;
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхИзмерение.Синоним;
		СтрокаДерева.ПутьКФайлу				= "";
		СтрокаДерева.Тип					= "";
		СтрокаДерева.Уровень				= СтрокаИзмерения.Уровень + 1;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхРесурсыНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Ресурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРесурсы = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаРесурсы.ИмяОбъекта			= СтрокаВладелец.ИмяОбъекта + "_resources";
	СтрокаРесурсы.ИндексКартинки		= 70;
	СтрокаРесурсы.ИдентификаторОбъекта	= "";
	СтрокаРесурсы.ПредставлениеОбъекта	= НСтр("ru='Ресурсы'");
	СтрокаРесурсы.ПутьКФайлу			= "";
	СтрокаРесурсы.Уровень				= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаРесурсы.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхРесурс Из СтрокаМетаданных.Ресурсы Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхРесурс.Имя;
		СтрокаДерева.ИндексКартинки			= 70;
		СтрокаДерева.ИдентификаторОбъекта	= СтрокаДанныхРесурс.Идентификатор;
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхРесурс.Синоним;
		СтрокаДерева.ПутьКФайлу				= "";
		СтрокаДерева.Тип					= "";
		СтрокаДерева.Уровень				= СтрокаРесурсы.Уровень + 1;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхРеквизитыНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизиты = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаРеквизиты.ИмяОбъекта				= СтрокаВладелец.ИмяОбъекта + "_props";
	СтрокаРеквизиты.ИндексКартинки			= 6;
	СтрокаРеквизиты.ИдентификаторОбъекта	= "";
	СтрокаРеквизиты.ПредставлениеОбъекта	= НСтр("ru='Реквизиты'");
	СтрокаРеквизиты.ПутьКФайлу				= "";
	СтрокаРеквизиты.Уровень					= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаРеквизиты.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхРеквизит Из СтрокаМетаданных.Реквизиты Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхРеквизит.Имя;
		СтрокаДерева.ИндексКартинки			= 6;
		СтрокаДерева.ИдентификаторОбъекта	= СтрокаДанныхРеквизит.Идентификатор;
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхРеквизит.Синоним;
		СтрокаДерева.ПутьКФайлу				= "";
		СтрокаДерева.Тип					= "";
		СтрокаДерева.Уровень				= СтрокаРеквизиты.Уровень + 1;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхЗначенияНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Значения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗначения = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаЗначения.ИмяОбъекта			= СтрокаВладелец.ИмяОбъекта + "_values";
	СтрокаЗначения.ИндексКартинки		= 6;
	СтрокаЗначения.ИдентификаторОбъекта	= "";
	СтрокаЗначения.ПредставлениеОбъекта	= НСтр("ru='Значения'");
	СтрокаЗначения.ПутьКФайлу			= "";
	СтрокаЗначения.Уровень				= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаЗначения.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхЗначение Из СтрокаМетаданных.Значения Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхЗначение.Имя;
		СтрокаДерева.ИндексКартинки			= 6;
		СтрокаДерева.ИдентификаторОбъекта	= СтрокаДанныхЗначение.Идентификатор;
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхЗначение.Синоним;
		СтрокаДерева.ПутьКФайлу				= "";
		СтрокаДерева.Тип					= "";
		СтрокаДерева.Уровень				= СтрокаЗначения.Уровень + 1;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхТабличныеЧастиНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.ТабличныеЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличныеЧасти = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаТабличныеЧасти.ИмяОбъекта				= СтрокаВладелец.ИмяОбъекта + "_tables";
	СтрокаТабличныеЧасти.ИндексКартинки			= 60;
	СтрокаТабличныеЧасти.ИдентификаторОбъекта	= "";
	СтрокаТабличныеЧасти.ПредставлениеОбъекта	= НСтр("ru='Табличные части'");
	СтрокаТабличныеЧасти.ПутьКФайлу				= "";
	СтрокаТабличныеЧасти.Уровень				= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаТабличныеЧасти.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхТабличнаяЧасть Из СтрокаМетаданных.ТабличныеЧасти Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхТабличнаяЧасть.Имя;
		СтрокаДерева.ИндексКартинки			= 60;
		СтрокаДерева.ИдентификаторОбъекта	= СтрокаДанныхТабличнаяЧасть.Идентификатор;
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхТабличнаяЧасть.Синоним;
		СтрокаДерева.ПутьКФайлу				= "";
		СтрокаДерева.Тип					= "";
		СтрокаДерева.Уровень				= СтрокаТабличныеЧасти.Уровень + 1;
		
		НаборЭлементовРеквизиты = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого СтрокаДанныхРеквизит Из СтрокаДанныхТабличнаяЧасть.Реквизиты Цикл
			СтрокаДереваРеквизит = НаборЭлементовРеквизиты.Добавить();
			СтрокаДереваРеквизит.ИмяОбъекта				= СтрокаДанныхРеквизит.Имя;
			СтрокаДереваРеквизит.ИндексКартинки			= 6;
			СтрокаДереваРеквизит.ИдентификаторОбъекта	= СтрокаДанныхРеквизит.Идентификатор;
			СтрокаДереваРеквизит.ПредставлениеОбъекта	= СтрокаДанныхРеквизит.Синоним;
			СтрокаДереваРеквизит.ПутьКФайлу				= "";
			СтрокаДереваРеквизит.Тип					= "";
			СтрокаДереваРеквизит.Уровень				= СтрокаДерева.Уровень + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхРасширенияНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Расширения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМетаданных.Расширения.Сортировать("Порядок");
	
	//Если НЕ СтрокаВладелец.ИмяОбъекта = "ConfigAttributtes" Тогда
	//	СтрокаСвойства = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	//	СтрокаСвойства.ИмяОбъекта			= СтрокаВладелец.ИмяОбъекта + "_attrs";
	//	СтрокаСвойства.ИндексКартинки		= -1;
	//	СтрокаСвойства.ИдентификаторОбъекта	= "";
	//	СтрокаСвойства.ПредставлениеОбъекта	= НСтр("ru='Свойства'");
	//	СтрокаСвойства.ПутьКФайлу			= "";
	//	СтрокаСвойства.Уровень				= СтрокаВладелец.Уровень + 1;
	//Иначе 
		СтрокаСвойства = СтрокаВладелец;
	//КонецЕсли;

	НаборЭлементов = СтрокаСвойства.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхРасширения Из СтрокаМетаданных.Расширения Цикл
		ЭтоОбщаяФорма = (СтрокаМетаданных.ИмяРодителя = "CommonForms" И СтрокаДанныхРасширения.Расширение = ".0");
		Если ЭтоОбщаяФорма Тогда
			СтрокаДерева = НаборЭлементов.Добавить();
			СтрокаДерева.ИмяОбъекта				= СтрокаДанныхРасширения.Имя + "_form";
			СтрокаДерева.ИндексКартинки			= ПиктограммаПоТипу(ЭтотОбъект, "Ф");
			СтрокаДерева.ИдентификаторОбъекта	= "";
			СтрокаДерева.ПредставлениеОбъекта	= НСтр("ru='Все данные формы'");
			СтрокаДерева.ПутьКФайлу				= СтрокаДанныхРасширения.ПутьКФайлу;
			СтрокаДерева.Тип					= "Ф";
			СтрокаДерева.Уровень				= СтрокаСвойства.Уровень + 1;
		КонецЕсли;
		
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхРасширения.Имя;
		СтрокаДерева.ИндексКартинки			= СтрокаДанныхРасширения.ИндексКартинки;
		СтрокаДерева.ИдентификаторОбъекта	= "";
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхРасширения.Представление;
		СтрокаДерева.ПутьКФайлу				= СтрокаДанныхРасширения.ПутьКФайлу;
		СтрокаДерева.Тип					= ?(ЭтоОбщаяФорма, "МФ", СтрокаДанныхРасширения.Тип);
		СтрокаДерева.Уровень				= СтрокаСвойства.Уровень + 1;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхФормыНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Формы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаФормы = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаФормы.ИмяОбъекта				= СтрокаВладелец.ИмяОбъекта + "_forms";
	СтрокаФормы.ИндексКартинки			= 48;
	СтрокаФормы.ИдентификаторОбъекта	= "";
	СтрокаФормы.ПредставлениеОбъекта	= НСтр("ru='Формы'");
	СтрокаФормы.ПутьКФайлу				= "";
	СтрокаФормы.Уровень					= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаФормы.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхФорма Из СтрокаМетаданных.Формы Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхФорма.Имя;
		СтрокаДерева.ИндексКартинки			= СтрокаДанныхФорма.ИндексКартинки;
		СтрокаДерева.ИдентификаторОбъекта	= "";
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхФорма.Представление;
		СтрокаДерева.ПутьКФайлу				= СтрокаДанныхФорма.ПутьКФайлу;
		СтрокаДерева.Тип					= "ТХТ";
		СтрокаДерева.Уровень				= СтрокаФормы.Уровень + 1;
		
		Если НЕ ПустаяСтрока(СтрокаДанныхФорма.ПутьМодуль) Тогда
			СтрокаРеквизиты = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаРеквизиты.ИмяОбъекта				= СтрокаДерева.ИмяОбъекта + "_form";
			СтрокаРеквизиты.ИндексКартинки			= ПиктограммаПоТипу(ЭтотОбъект, "Ф");
			СтрокаРеквизиты.ИдентификаторОбъекта	= "";
			СтрокаРеквизиты.ПредставлениеОбъекта	= НСтр("ru='Все данные формы'");
			СтрокаРеквизиты.ПутьКФайлу				= СтрокаДанныхФорма.ПутьМодуль;
			СтрокаРеквизиты.Тип						= "Ф";
			СтрокаРеквизиты.Уровень					= СтрокаДерева.Уровень + 1;
			
			СтрокаМодуль = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаМодуль.ИмяОбъекта				= СтрокаДерева.ИмяОбъекта + "_module";
			СтрокаМодуль.ИндексКартинки			= ПиктограммаПоТипу(ЭтотОбъект, "ТХТ");
			СтрокаМодуль.ИдентификаторОбъекта	= "";
			СтрокаМодуль.ПредставлениеОбъекта	= НСтр("ru='Модуль формы'");
			СтрокаМодуль.ПутьКФайлу				= СтрокаДанныхФорма.ПутьМодуль;
			СтрокаМодуль.Тип					= "МФ";
			СтрокаМодуль.Уровень				= СтрокаДерева.Уровень + 1;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаДанныхФорма.ПутьСправка) Тогда
			СтрокаСправка = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаСправка.ИмяОбъекта			= СтрокаДерева.ИмяОбъекта + "_info";
			СтрокаСправка.ИндексКартинки		= ПиктограммаПоТипу(ЭтотОбъект, "С");
			СтрокаСправка.ИдентификаторОбъекта	= "";
			СтрокаСправка.ПредставлениеОбъекта	= НСтр("ru='Справка'");
			СтрокаСправка.ПутьКФайлу			= СтрокаДанныхФорма.ПутьСправка;
			СтрокаСправка.Тип					= "С";
			СтрокаСправка.Уровень				= СтрокаДерева.Уровень + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхМакетыНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Макеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМакеты = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаМакеты.ИмяОбъекта				= СтрокаВладелец.ИмяОбъекта + "_templts";
	СтрокаМакеты.ИндексКартинки			= 61;
	СтрокаМакеты.ИдентификаторОбъекта	= "";
	СтрокаМакеты.ПредставлениеОбъекта	= НСтр("ru='Макеты'");
	СтрокаМакеты.ПутьКФайлу				= "";
	СтрокаМакеты.Уровень				= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаМакеты.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхМакет Из СтрокаМетаданных.Макеты Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхМакет.Имя;
		СтрокаДерева.ИндексКартинки			= СтрокаДанныхМакет.ИндексКартинки;
		СтрокаДерева.ИдентификаторОбъекта	= "";
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхМакет.Представление;
		СтрокаДерева.ПутьКФайлу				= СтрокаДанныхМакет.ПутьКФайлу;
		СтрокаДерева.Тип					= "ТХТ";
		СтрокаДерева.Уровень				= СтрокаМакеты.Уровень + 1;
		
		Если НЕ ПустаяСтрока(СтрокаДанныхМакет.ПутьМакет) Тогда
			СтрокаМакет = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаМакет.ИмяОбъекта				= СтрокаДерева.ИмяОбъекта + "_template";
			СтрокаМакет.ИндексКартинки			= -1;
			СтрокаМакет.ИдентификаторОбъекта	= "";
			СтрокаМакет.ПредставлениеОбъекта	= НСтр("ru='Макет'");
			СтрокаМакет.ПутьКФайлу				= СтрокаДанныхМакет.ПутьМакет;
			СтрокаМакет.Тип						= "М";
			СтрокаМакет.Уровень					= СтрокаДерева.Уровень + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхКомандыНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Команды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКоманды = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаКоманды.ИмяОбъекта			= СтрокаВладелец.ИмяОбъекта + "_commands";
	СтрокаКоманды.ИндексКартинки		= 16;
	СтрокаКоманды.ИдентификаторОбъекта	= "";
	СтрокаКоманды.ПредставлениеОбъекта	= НСтр("ru='Команды'");
	СтрокаКоманды.ПутьКФайлу			= "";
	СтрокаКоманды.Уровень				= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаКоманды.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхКоманда Из СтрокаМетаданных.Команды Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхКоманда.Имя;
		СтрокаДерева.ИндексКартинки			= СтрокаДанныхКоманда.ИндексКартинки;
		СтрокаДерева.ИдентификаторОбъекта	= "";
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхКоманда.Представление;
		СтрокаДерева.ПутьКФайлу				= СтрокаДанныхКоманда.ПутьКФайлу;
		СтрокаДерева.Уровень				= СтрокаКоманды.Уровень + 1;
		
		Если НЕ ПустаяСтрока(СтрокаДанныхКоманда.ПутьМодуль) Тогда
			СтрокаМодуль = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаМодуль.ИмяОбъекта				= СтрокаДерева.ИмяОбъекта + "_module";
			СтрокаМодуль.ИндексКартинки			= ПиктограммаПоТипу(ЭтотОбъект, "МОД");
			СтрокаМодуль.ИдентификаторОбъекта	= "";
			СтрокаМодуль.ПредставлениеОбъекта	= НСтр("ru='Модуль команды'");
			СтрокаМодуль.ПутьКФайлу				= СтрокаДанныхКоманда.ПутьМодуль;
			СтрокаМодуль.Тип					= "МОД";
			СтрокаМодуль.Уровень				= СтрокаДерева.Уровень + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере 
Процедура ПостроитьДеревоМетаданныхПерерасчетыНаСервере(СтрокаВладелец, знач СтрокаМетаданных)
	Если СтрокаМетаданных.Перерасчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПерерасчеты = СтрокаВладелец.ПолучитьЭлементы().Добавить();
	СтрокаПерерасчеты.ИмяОбъекта			= СтрокаВладелец.ИмяОбъекта + "_calcs";
	СтрокаПерерасчеты.ИндексКартинки		= 62;
	СтрокаПерерасчеты.ИдентификаторОбъекта	= "";
	СтрокаПерерасчеты.ПредставлениеОбъекта	= НСтр("ru='Пересчеты'");
	СтрокаПерерасчеты.ПутьКФайлу			= "";
	СтрокаПерерасчеты.Уровень				= СтрокаВладелец.Уровень + 1;
	
	НаборЭлементов = СтрокаПерерасчеты.ПолучитьЭлементы();
	Для Каждого СтрокаДанныхПерерасчет Из СтрокаМетаданных.Перерасчеты Цикл
		СтрокаДерева = НаборЭлементов.Добавить();
		СтрокаДерева.ИмяОбъекта				= СтрокаДанныхПерерасчет.Имя;
		СтрокаДерева.ИндексКартинки			= СтрокаДанныхПерерасчет.ИндексКартинки;
		СтрокаДерева.ИдентификаторОбъекта	= "";
		СтрокаДерева.ПредставлениеОбъекта	= СтрокаДанныхПерерасчет.Представление;
		СтрокаДерева.ПутьКФайлу				= СтрокаДанныхПерерасчет.ПутьКФайлу;
		СтрокаДерева.Тип					= "ТХТ";
		СтрокаДерева.Уровень				= СтрокаПерерасчеты.Уровень + 1;
		
		Если НЕ ПустаяСтрока(СтрокаДанныхПерерасчет.ПутьМодуль) Тогда
			СтрокаМодуль = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаМодуль.ИмяОбъекта				= СтрокаДерева.ИмяОбъекта + "_module";
			СтрокаМодуль.ИндексКартинки			= ПиктограммаПоТипу(ЭтотОбъект, "МОД");
			СтрокаМодуль.ИдентификаторОбъекта	= "";
			СтрокаМодуль.ПредставлениеОбъекта	= НСтр("ru='Модуль команды'");
			СтрокаМодуль.ПутьКФайлу				= СтрокаДанныхПерерасчет.ПутьМодуль;
			СтрокаМодуль.Тип					= "МОД";
			СтрокаМодуль.Уровень				= СтрокаДерева.Уровень + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ПроверитьНаличиеУтилит

&НаКлиенте 
Асинх Процедура ПроверитьНаличиеУтилит(знач ПриОткрытии = Ложь)
	ЭтотОбъект.УтилитыСуществуют = Ложь;
	
	ЭтотОбъект.УтилитыСуществуют = Ждать ПроверитьUnpackV8Асинх();
	УстановитьЗаголовокДекорацииНаличиеУтилит(ЭтотОбъект);
	
	МожноРаспаковать = (НЕ ПустаяСтрока(Объект.ПутьКФайлу) И НЕ ПустаяСтрока(Объект.КаталогРаспаковки));
	Если ЭтотОбъект.УтилитыСуществуют И МожноРаспаковать Тогда
		Ждать РаспаковатьИВывестиАсинх();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Асинх Функция ПроверитьUnpackV8Асинх()
	Файл = Новый Файл(ЭтотОбъект.ПутьКUnpackV8);
	
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	Если НЕ ФайлСуществует Тогда
		ДвоичныеДанные = ПолучитьUnpackV8НаСервере();
		Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			Ждать ДвоичныеДанные.ЗаписатьАсинх(ЭтотОбъект.ПутьКUnpackV8);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ждать Файл.СуществуетАсинх();		
КонецФункции

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции_РаспаковатьИВывести

&НаКлиенте 
Асинх Функция РаспаковатьИВывестиАсинх() Экспорт
	
	РезультатРаспаковки = Ждать РаспаковатьАсинх();
	Если НЕ РезультатРаспаковки.Выполнено Тогда
		ТекстСообщения = НСтр("ru='При распаковке файла произошла ошибка: '") + РезультатРаспаковки.ТекстОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(НСтр("ru='Обновление формы'"),, НСтр("ru='Построение дерева метаданных'"), БиблиотекаКартинок.ПоказатьДанные); 
	
	ПостроитьДеревоМетаданныхНаСервере();
	
	УстановитьЗаголовокИнформацияОРелизе(ЭтотОбъект);
	
	ПоказатьОповещениеПользователя(НСтр("ru='Распаковка выполнена'"),,, БиблиотекаКартинок.Успешно32);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Распаковать

&НаКлиенте 
Асинх Функция РаспаковатьАсинх()
	Результат = Новый Структура("Выполнено,ТекстОшибки", Ложь, "");
	
	//WshShell = Новый COMОбъект("WScript.Shell");
	//WshShell.Run(КомандаВоВремФайл, 0, Истина);
	//
	//ВыполнитьОбработкуОповещения(ОповещениеПреобразованиеCFU, Неопределено);
	
	ВыполнитьОчисткуДанныхФормы();
	
	ФайлКаталога = Новый Файл(Объект.КаталогРаспаковки);
	
	ФайлСуществует = Ждать ФайлКаталога.СуществуетАсинх();
	ЭтоКаталог = Ложь;
	Если ФайлСуществует Тогда
		ЭтоКаталог = Ждать ФайлКаталога.ЭтоКаталогАсинх();
	КонецЕсли;
	
	Если НЕ ФайлСуществует ИЛИ НЕ ЭтоКаталог Тогда
		Ждать СоздатьКаталогАсинх(Объект.КаталогРаспаковки);
	Иначе 
		Ждать УдалитьФайлыАсинх(Объект.КаталогРаспаковки);
	КонецЕсли;
	
	ПутьКВременномуФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Объект.КаталогРаспаковки, "cfu.tmp");
	
	ФайлПользователя = Новый Файл(Объект.ПутьКФайлу);
	
	ЭтотОбъект.ЭтоФайлОбновления = (ФайлПользователя.Расширение = ".cfu");
	ЭтотОбъект.ЭтоФайлРасширения = (ФайлПользователя.Расширение = ".cfe");
	
	Если ЭтотОбъект.ЭтоФайлОбновления Тогда 
		КомандаВоВремФайл = СтрШаблон("""%1"" -i ""%2"" ""%3""",
			ЭтотОбъект.ПутьКUnpackV8,
			Объект.ПутьКФайлу,
			ПутьКВременномуФайлу);
			
		Состояние(НСтр("ru='Чтение архива CFU...'"),, НСтр("ru='Операция может занять длительное время...'"), БиблиотекаКартинок.ПоказатьДанные); 
		
		КодВозврата = Ждать ЗапуститьПриложениеАсинх(КомандаВоВремФайл,, Истина);
		Если НЕ ТипЗнч(КодВозврата) = Тип("Число") ИЛИ КодВозврата <> 0 Тогда
			Результат.ТекстОшибки = НСтр("ru='Ошибка при чтении архива файла (inflate)'");
			Возврат Результат;
		КонецЕсли;
		
		КомандаРаспаковка = СтрШаблон("""%1"" -p ""%2"" ""%3""",
			ЭтотОбъект.ПутьКUnpackV8,
			ПутьКВременномуФайлу,
			Объект.КаталогРаспаковки);
	ИначеЕсли ЭтотОбъект.ЭтоФайлРасширения Тогда
		КомандаРаспаковка = СтрШаблон("""%1"" -p ""%2"" ""%3""",
			ЭтотОбъект.ПутьКUnpackV8,
			Объект.ПутьКФайлу,
			Объект.КаталогРаспаковки);
	КонецЕсли;
		
	Состояние(НСтр("ru='Распаковка файла...'"),, НСтр("ru='Операция может занять длительное время...'"), БиблиотекаКартинок.ПоказатьДанные); 
	
	КодВозврата = Ждать ЗапуститьПриложениеАсинх(КомандаРаспаковка,, Истина);
	Если НЕ ТипЗнч(КодВозврата) = Тип("Число") ИЛИ КодВозврата <> 0 Тогда
		Результат.ТекстОшибки = НСтр("ru='Ошибка при распаковке файла, попробуйте еще раз'");
		Возврат Результат;
	КонецЕсли;
	
	Ждать УдалитьФайлыАсинх(ПутьКВременномуФайлу);
	
	Если ЭтоФайлОбновления Тогда
		РезультатЧтения = Ждать РаспаковатьДанныеОбновления();
	ИначеЕсли ЭтоФайлРасширения Тогда
		РезультатЧтения = Ждать РаспаковатьДанныеРасширения();
	КонецЕсли;
	
	Результат.Выполнено 	= РезультатЧтения.Выполнено;
	Результат.ТекстОшибки	= РезультатЧтения.ТекстОшибки;
	
	Возврат Результат;
КонецФункции

&НаКлиенте 
Асинх Функция РаспаковатьДанныеОбновления()
	Результат = Новый Структура("Выполнено,ТекстОшибки", Ложь, "");
	
	ПутьКФайлуИнфо = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Объект.КаталогРаспаковки, "UpdateInfo.inf");
	
	Файл = Новый Файл(ПутьКФайлуИнфо);
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	Если НЕ ФайлСуществует Тогда
		Результат.ТекстОшибки = НСтр("ru='Не найден файл ""UpdateInfo.inf"".'");
		Возврат Результат;
	КонецЕсли;
	
	ИнформацияОбОбновлении = ПрочитатьДанныеФайла(ПутьКФайлуИнфо);
	ИнформацияОбОбновлении = Сред(ИнформацияОбОбновлении, 2, СтрДлина(ИнформацияОбОбновлении) - 2); // отсекаем первую и последнюю фиг. скобки
	
	МассивИнформации = СтрРазделить(ИнформацияОбОбновлении, ",", Ложь);
	Если МассивИнформации.Количество() = 0 Тогда
		Результат.ТекстОшибки = НСтр("ru='Файл ""UpdateInfo.inf"" содержит некорректные данные.'");
		Возврат Результат;
	КонецЕсли;
		
	Состояние(НСтр("ru='Чтение данных'"),, НСтр("ru='Чтение общих данных файла обновления'"), БиблиотекаКартинок.ПоказатьДанные); 
	
	// основания
	ЗаполнитьРелизыОснования(МассивИнформации); 
	
	// анализ файлов
	НайденныеФайлы = Ждать НайтиФайлыАсинх(Объект.КаталогРаспаковки, "*", Ложь);
	
	МассивФайлов		= Новый Соответствие;
	МассивРасширений	= Новый Соответствие;
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если ПустаяСтрока(Файл.Расширение) Тогда
			МассивФайлов.Вставить(Файл.ИмяБезРасширения, Файл.ПолноеИмя);
		Иначе 
			ФиксСоответствие = МассивРасширений.Получить(Файл.ИмяБезРасширения);
			Если ФиксСоответствие = Неопределено Тогда
				НаборДанных = Новый Соответствие;
				МассивРасширений.Вставить(Файл.ИмяБезРасширения, НаборДанных);
			Иначе 
				НаборДанных = Новый Соответствие(ФиксСоответствие);
			КонецЕсли;
			
			НаборДанных.Вставить(Файл.Расширение, Файл.ПолноеИмя);
			МассивРасширений.Вставить(Файл.ИмяБезРасширения, Новый ФиксированноеСоответствие(НаборДанных));
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторКонфигурации	= МассивИнформации[МассивИнформации.Количество()-1];
	ФайлИнфоКонфигурация		= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Объект.КаталогРаспаковки, ИдентификаторКонфигурации);
	ИнформацияОКонфигурации		= ПрочитатьДанныеФайла(ФайлИнфоКонфигурация);
	
	#Область СтрокаМетаданных_Конфигурация
	НачалоПозиции = СтрНайти(ИнформацияОКонфигурации, ",""" + ЭтотОбъект.ИмяКонфигурации + """,");
	Если НачалоПозиции > 0 Тогда
		ИдентификаторСвойствКонфигурации = Сред(ИнформацияОКонфигурации, НачалоПозиции - 37, 36);
		ИмяСиноним = ПрочитатьИмяСинонимОбъекта(ИнформацияОКонфигурации, ИдентификаторСвойствКонфигурации);
		
		СтрокаМетаданных = ДобавитьСтрокуТаблицыМетаданных(МассивФайлов, ПустойИдентификатор(), "ConfigAttributtes", ИдентификаторСвойствКонфигурации, ИмяСиноним);
		ДополнитьИнформациюПоТипуОбъекта(СтрокаМетаданных, ИнформацияОКонфигурации, МассивФайлов, МассивРасширений);
	КонецЕсли;
	#КонецОбласти 
	
	#Область СтрокиМетаданных_Объекты
	Для Каждого ИдентификаторИмя Из ЭтотОбъект.ИдентификаторыОбъектов Цикл
		Состояние(НСтр("ru='Обработка файлов'"),, НСтр("ru='Тип файлов: '") + ИдентификаторИмя.Значение, БиблиотекаКартинок.ПоказатьДанные); 
		ОбработкаПрерыванияПользователя();
		
		МассивОбъекты = НайтиПодчиненныеОбъектыПоИдентификатору(ИнформацияОКонфигурации, ИдентификаторИмя.Ключ);
		ЗаполнитьТаблицуМетаданныхПоМассивуОбъектов(ИдентификаторИмя, МассивОбъекты, МассивИнформации, МассивФайлов, МассивРасширений);
	КонецЦикла;
	#КонецОбласти 
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте 
Асинх Функция РаспаковатьДанныеРасширения()
	
	Результат = Новый Структура("Выполнено,ТекстОшибки", Ложь, "");
	
	ПутьКФайлуИнфо = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Объект.КаталогРаспаковки, "configinfo");
	
	Файл = Новый Файл(ПутьКФайлуИнфо);
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	Если НЕ ФайлСуществует Тогда
		Результат.ТекстОшибки = НСтр("ru='Не найден файл ""configinfo"".'");
		Возврат Результат;
	КонецЕсли;
	
	ДанныеФайла = ПрочитатьДанныеФайла(ПутьКФайлуИнфо);
	ОснИнфоБлок = ПрочитатьИнформационныйБлокПоКлючу(ДанныеФайла, "2");
	Если ПустаяСтрока(ОснИнфоБлок) Тогда
		Результат.ТекстОшибки = НСтр("ru='Не найден основной блок информации в ""configinfo"".'");
		Возврат Результат;
	КонецЕсли;

	// анализ файлов
	НайденныеФайлы = Ждать НайтиФайлыАсинх(Объект.КаталогРаспаковки, "*", Ложь);
	
	МассивФайлов		= Новый Соответствие;
	МассивРасширений	= Новый Соответствие;
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если ПустаяСтрока(Файл.Расширение) Тогда
			МассивФайлов.Вставить(Файл.ИмяБезРасширения, Файл.ПолноеИмя);
		Иначе 
			ФиксСоответствие = МассивРасширений.Получить(Файл.ИмяБезРасширения);
			Если ФиксСоответствие = Неопределено Тогда
				НаборДанных = Новый Соответствие;
				МассивРасширений.Вставить(Файл.ИмяБезРасширения, НаборДанных);
			Иначе 
				НаборДанных = Новый Соответствие(ФиксСоответствие);
			КонецЕсли;
			
			НаборДанных.Вставить(Файл.Расширение, Файл.ПолноеИмя);
			МассивРасширений.Вставить(Файл.ИмяБезРасширения, Новый ФиксированноеСоответствие(НаборДанных));
		КонецЕсли;
	КонецЦикла;
	
	// идентификатор конфигурации
	ОснИнфоБлок = СтрЗаменить(ОснИнфоБлок, "{", "");
	ОснИнфоБлок = СтрЗаменить(ОснИнфоБлок, "}", "");
	ДанныеБлока = СтрРазделить(ОснИнфоБлок, ",");
	
	ИдентификаторКонфигурации = ?(ДанныеБлока.Количество() > 0, ДанныеБлока[1], "");
	Если ПустаяСтрока(ИдентификаторКонфигурации) Тогда
		Результат.ТекстОшибки = НСтр("ru='Не найден идентификатор основного блока информации в ""configinfo"".'");
		Возврат Результат;
	КонецЕсли;
	
	ФайлИнфоКонфигурация		= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Объект.КаталогРаспаковки, ИдентификаторКонфигурации);
	ИнформацияОКонфигурации		= ПрочитатьДанныеФайла(ФайлИнфоКонфигурация);
	
	// основания
	ЗаполнитьРелизыРасширения(ИнформацияОКонфигурации); 
	
	#Область СтрокаМетаданных_Конфигурация
	НачПозиции7 = СтрНайти(ИнформацияОКонфигурации, "{",,, 7);
	Если НачПозиции7 = 0 Тогда
		Результат.ТекстОшибки = НСтр("ru='Не найден блок информации о конфигурации'");
		Возврат Результат;
	КонецЕсли;
		
	БлокКонфигурации	= ПрочитатьИнформационныйБлок(ИнформацияОКонфигурации, НачПозиции7);
	БлокКонфигурации1	= ПрочитатьИнформационныйБлокПоКлючу(БлокКонфигурации, "1");
	СтрБлокКонфигурации	= СтрРазделить(БлокКонфигурации1, ",");
	
	ИдентификаторСвойствКонфигурации = ?(СтрБлокКонфигурации.Количество() > 2, СтрБлокКонфигурации[2], "");
	ИдентификаторСвойствКонфигурации = СтрЗаменить(ИдентификаторСвойствКонфигурации, "}", "");
	
	ИмяСиноним = ПрочитатьИмяСинонимРасширения(БлокКонфигурации);
	ЭтотОбъект.ИмяКонфигурации = ИмяСиноним.Имя;
	
	СтрокаМетаданных = ДобавитьСтрокуТаблицыМетаданных(МассивФайлов, ПустойИдентификатор(), "ConfigAttributtes", ИдентификаторСвойствКонфигурации, ИмяСиноним);
	ДополнитьИнформациюПоТипуОбъекта(СтрокаМетаданных, ИнформацияОКонфигурации, МассивФайлов, МассивРасширений);
	#КонецОбласти
	
	#Область СтрокиМетаданных_Объекты
	Для Каждого ИдентификаторИмя Из ЭтотОбъект.ИдентификаторыОбъектов Цикл
		Состояние(НСтр("ru='Обработка файлов'"),, НСтр("ru='Тип файлов: '") + ИдентификаторИмя.Значение, БиблиотекаКартинок.ПоказатьДанные); 
		ОбработкаПрерыванияПользователя();
		
		МассивОбъекты = НайтиПодчиненныеОбъектыПоИдентификатору(ИнформацияОКонфигурации, ИдентификаторИмя.Ключ);
		ЗаполнитьТаблицуМетаданныхПоМассивуОбъектов(ИдентификаторИмя, МассивОбъекты, Неопределено, МассивФайлов, МассивРасширений);
	КонецЦикла;
	#КонецОбласти 
		
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ТаблицаМетаданных

&НаКлиенте 
Процедура ЗаполнитьТаблицуМетаданныхПоМассивуОбъектов(знач ИдентификаторИмя, знач МассивОбъектов, знач МассивИнформации, знач МассивФайлов, знач МассивРасширений, знач ИдентификаторПодсистемы = "")
	Если НЕ ТипЗнч(МассивОбъектов) = Тип("Массив") ИЛИ МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторОбъекта Из МассивОбъектов Цикл
		Если ЭтотОбъект.ЭтоФайлОбновления И МассивИнформации.Найти("""" + ИдентификаторОбъекта + """") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлИнформацияОбОбъекте = МассивФайлов.Получить(ИдентификаторОбъекта);
		Если ФайлИнформацияОбОбъекте = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОбОбъекте = ПрочитатьДанныеФайла(ФайлИнформацияОбОбъекте);
		ИмяСиноним = ПрочитатьИмяСинонимОбъекта(ИнформацияОбОбъекте, ИдентификаторОбъекта);
		
		СтрокаМетаданных = ДобавитьСтрокуТаблицыМетаданных(МассивФайлов, ИдентификаторИмя.Ключ, ИдентификаторИмя.Значение, ИдентификаторОбъекта, ИмяСиноним, ИдентификаторПодсистемы);		
		ДополнитьИнформациюПоТипуОбъекта(СтрокаМетаданных, ИнформацияОбОбъекте, МассивФайлов, МассивРасширений);
		ДополнитьПодчиненныеПодсистемы(СтрокаМетаданных, ИдентификаторИмя, ИнформацияОбОбъекте, МассивИнформации, МассивФайлов, МассивРасширений);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ДополнитьИнформациюПоТипуОбъекта(СтрокаМетаданных, знач ИнформацияОбОбъекте, знач МассивФайлов, знач МассивРасширений)
	Если ЭтотОбъект.ТолькоОбъекты = Истина Тогда
		Возврат;
	КонецЕсли;
		
	Если СтрокаМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиМетаданных = ЭтотОбъект.НастройкаЧтенияМетаданных.Получить(СтрокаМетаданных.ИмяРодителя);
	Если НастройкиМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМетаданных.ИндексКартинки = НастройкиМетаданных.ИндексКартинки;
	
	#Область Расширения
	НастройкаРасширений	= ЭтотОбъект.НастройкаРасширенийОбъектов.Получить(НастройкиМетаданных.Наименование);
	Если НастройкаРасширений = Неопределено Тогда
		НастройкаРасширений = ЭтотОбъект.НастройкаРасширенийОбъектов.Получить("*");
		Если НастройкаРасширений = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='отсутствуют расширения для '") + НастройкиМетаданных.Наименование);
			НастройкаРасширений = Новый Соответствие;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеРасширений = МассивРасширений.Получить(СтрокаМетаданных.ИдентификаторОбъекта);
	Если ТипЗнч(ДанныеРасширений) = Тип("ФиксированноеСоответствие") Тогда
		Для Каждого КлючИЗначение Из НастройкаРасширений Цикл
			СтрокаРасширения = КлючИЗначение.Значение;
			
			ПутьКФайлуРасширения = ДанныеРасширений.Получить(СтрокаРасширения.Расширение);
			Если ПутьКФайлуРасширения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМетаданныеРасширение = СтрокаМетаданных.Расширения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМетаданныеРасширение, СтрокаРасширения);
			СтрокаМетаданныеРасширение.ПутьКФайлу = ПутьКФайлуРасширения;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Формы
	Если НЕ ПустаяСтрока(НастройкиМетаданных.ИдентификаторФормы) Тогда
		МассивФормы = НайтиПодчиненныеОбъектыПоИдентификатору(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторФормы);
		Для Каждого ИдентификаторФормы Из МассивФормы Цикл
			ПутьКФайлуФормы = МассивФайлов.Получить(ИдентификаторФормы);
			Если ПутьКФайлуФормы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НаборРасширений = МассивРасширений.Получить(ИдентификаторФормы);
			
			Если НаборРасширений <> Неопределено Тогда
				ПутьМодульФормы = НаборРасширений.Получить(".0");
				ПутьСправка		= НаборРасширений.Получить(".1");
			КонецЕсли;
			
			ИнформацияОФорме	= ПрочитатьДанныеФайла(ПутьКФайлуФормы);
			ИмяСиноним			= ПрочитатьИмяСинонимОбъекта(ИнформацияОФорме, ИдентификаторФормы);
			
			СтрокаФормы = СтрокаМетаданных.Формы.Добавить();
			СтрокаФормы.Идентификатор	= ИдентификаторФормы;
			СтрокаФормы.Имя				= ИмяСиноним.Имя;
			СтрокаФормы.Представление	= ИмяСиноним.Синоним;
			СтрокаФормы.ПутьКФайлу		= ПутьКФайлуФормы;
			СтрокаФормы.ПутьМодуль		= ?(ПутьМодульФормы = Неопределено, "", ПутьМодульФормы);
			СтрокаФормы.ПутьСправка		= ?(ПутьСправка = Неопределено, "", ПутьСправка);
			СтрокаФормы.ИндексКартинки	= 48;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Макеты
	Если НЕ ПустаяСтрока(НастройкиМетаданных.ИдентификаторМакеты) Тогда
		МассивМакеты = НайтиПодчиненныеОбъектыПоИдентификатору(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторМакеты);
		Для Каждого ИдентификаторМакета Из МассивМакеты Цикл
			ПутьКФайлуМакета = МассивФайлов.Получить(ИдентификаторМакета);
			Если ПутьКФайлуМакета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НаборРасширений = МассивРасширений.Получить(ИдентификаторМакета);
			
			Если НаборРасширений <> Неопределено Тогда
				ПутьМакет = НаборРасширений.Получить(".0");
			КонецЕсли;
			
			ИнформацияОМакете	= ПрочитатьДанныеФайла(ПутьКФайлуМакета);
			ИмяСиноним			= ПрочитатьИмяСинонимОбъекта(ИнформацияОМакете, ИдентификаторМакета);
			
			СтрокаМакета = СтрокаМетаданных.Макеты.Добавить();
			СтрокаМакета.Идентификатор	= ИдентификаторМакета;
			СтрокаМакета.Имя			= ИмяСиноним.Имя;
			СтрокаМакета.Представление	= ИмяСиноним.Синоним;
			СтрокаМакета.ПутьКФайлу		= ПутьКФайлуМакета;
			СтрокаМакета.ПутьМакет		= ?(ПутьМакет = Неопределено, "", ПутьМакет);
			СтрокаМакета.ИндексКартинки	= 61;
		КонецЦикла;
	КонецЕсли;	
	#КонецОбласти 
	
	#Область Команды
	Если НЕ ПустаяСтрока(НастройкиМетаданных.ИдентификаторКоманды) Тогда
		МассивКоманды = НайтиПодчиненныеКомандыПоИдентификатору(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторКоманды);
		Для Каждого ИдентификаторКоманды Из МассивКоманды Цикл
			НаборРасширений = МассивРасширений.Получить(ИдентификаторКоманды);
			
			Если НаборРасширений <> Неопределено Тогда
				ПутьМодуль = НаборРасширений.Получить(".2");
			КонецЕсли;
			
			ИмяСиноним = ПрочитатьИмяСинонимОбъекта(ИнформацияОбОбъекте, ИдентификаторКоманды);
			
			СтрокаКоманды = СтрокаМетаданных.Команды.Добавить();
			СтрокаКоманды.Идентификатор		= ИдентификаторКоманды;
			СтрокаКоманды.Имя				= ИмяСиноним.Имя;
			СтрокаКоманды.Представление		= ИмяСиноним.Синоним;
			СтрокаКоманды.ПутьКФайлу		= "";
			СтрокаКоманды.ПутьМодуль		= ?(ПутьМодуль = Неопределено, "", ПутьМодуль);
			СтрокаКоманды.ИндексКартинки	= 16;
		КонецЦикла;
	КонецЕсли;	
	#КонецОбласти 
	
	#Область Перерасчеты
	Если НЕ ПустаяСтрока(НастройкиМетаданных.ИдентификаторПерерасчеты) Тогда
		МассивПерерасчеты = НайтиПодчиненныеОбъектыПоИдентификатору(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторПерерасчеты);
		Для Каждого ИдентификаторПерерасчета Из МассивПерерасчеты Цикл
			ПутьКФайлуПерерасчета = МассивФайлов.Получить(ИдентификаторПерерасчета);
			Если ПутьКФайлуПерерасчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НаборРасширений = МассивРасширений.Получить(ИдентификаторПерерасчета);		
			Если НаборРасширений <> Неопределено Тогда
				ПутьМодуль = НаборРасширений.Получить(".0");
			КонецЕсли;
			
			ИнформацияОПерерасчете	= ПрочитатьДанныеФайла(ПутьКФайлуПерерасчета);
			ИмяСиноним				= ПрочитатьИмяСинонимОбъекта(ИнформацияОПерерасчете, ИдентификаторПерерасчета);
			
			СтрокаПерерасчет = СтрокаМетаданных.Перерасчеты.Добавить();
			СтрокаПерерасчет.Идентификатор		= ИдентификаторПерерасчета;
			СтрокаПерерасчет.Имя				= ИмяСиноним.Имя;
			СтрокаПерерасчет.Представление		= ИмяСиноним.Синоним;
			СтрокаПерерасчет.ПутьКФайлу			= ПутьКФайлуПерерасчета;
			СтрокаПерерасчет.ПутьМодуль			= ?(ПутьМодуль = Неопределено, "", ПутьМодуль);
			СтрокаПерерасчет.ИндексКартинки		= 62;
		КонецЦикла;
	КонецЕсли;	
	#КонецОбласти 	
	
	ДополнитьИнформациюПоТипуОбъекта_Значения(СтрокаМетаданных, НастройкиМетаданных, ИнформацияОбОбъекте); 
	ДополнитьИнформациюПоТипуОбъекта_Измерения(СтрокаМетаданных, НастройкиМетаданных, ИнформацияОбОбъекте); 
	ДополнитьИнформациюПоТипуОбъекта_Ресурсы(СтрокаМетаданных, НастройкиМетаданных, ИнформацияОбОбъекте); 
	ДополнитьИнформациюПоТипуОбъекта_Реквизиты(СтрокаМетаданных, НастройкиМетаданных, ИнформацияОбОбъекте); 
	ДополнитьИнформациюПоТипуОбъекта_ТабличныеЧасти(СтрокаМетаданных, НастройкиМетаданных, ИнформацияОбОбъекте);
КонецПроцедуры

&НаКлиенте 
Процедура ДополнитьИнформациюПоТипуОбъекта_Измерения(СтрокаМетаданных, знач НастройкиМетаданных, знач ИнформацияОбОбъекте)
	Если ПустаяСтрока(НастройкиМетаданных.ИдентификаторИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоИзмерения = СтрНайти(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторИзмерения);
	Если НачалоИзмерения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Область КоличествоИзмерений
	КоличествоИзмерений = 0;
	
	НачКолИзмерений = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоИзмерения, 1);
	КонКолИзмерений = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоИзмерения, 2);
	Если КонКолИзмерений > НачКолИзмерений Тогда
		СтрКолИзмерений = Сред(ИнформацияОбОбъекте, НачКолИзмерений + 1, КонКолИзмерений - НачКолИзмерений - 1);
		КоличествоИзмерений = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрКолИзмерений);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоИзмерений) Тогда
		Возврат;
	КонецЕсли;
	#КонецОбласти 
	
	КонецБлока		= СтрДлина(ИнформацияОбОбъекте);
	НачалоПозиции	= КонКолИзмерений + 1;
	Для Индекс = 1 По КоличествоИзмерений Цикл
		Если НачалоПозиции > КонецБлока Тогда
			Прервать;
		КонецЕсли;
		
		ОкончаниеБлока = 0;
		
		БлокИзмерения = ПрочитатьИнформационныйБлок(ИнформацияОбОбъекте, НачалоПозиции, ОкончаниеБлока);
		Если ПустаяСтрока(БлокИзмерения) Тогда
			Продолжить;
		КонецЕсли;
		НачалоПозиции = ОкончаниеБлока + 1;
		
		НачБлокаИдентификатор	= СтрНайти(БлокИзмерения, "{",,, 6);
		КонБлокаИдентификатор	= 0;
		БлокИдентификатор		= ?(НачБлокаИдентификатор = 0, "", ПрочитатьИнформационныйБлок(БлокИзмерения, НачБлокаИдентификатор, КонБлокаИдентификатор));
		МассивИдентификатор		= СтрРазделить(БлокИдентификатор, ",", Ложь);
		
		НачБлокаПредставление	= СтрНайти(БлокИзмерения, "{",,, 7);
		КонБлокаПредставление	= 0;
		БлокПредставление		= ?(НачБлокаПредставление = 0, "", ПрочитатьИнформационныйБлок(БлокИзмерения, НачБлокаПредставление, КонБлокаПредставление));
		МассивПредставление		= СтрРазделить(БлокПредставление, ",", Ложь);
		
		Если МассивИдентификатор.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(БлокИзмерения, КонБлокаИдентификатор + 2, НачБлокаПредставление - КонБлокаИдентификатор - 4);
		Если МассивПредставление.Количество() >= 3 Тогда
			СинонимРеквизита = СтрЗаменить(МассивПредставление[2], "}", "");
		Иначе 
			СинонимРеквизита = ИмяРеквизита;
		КонецЕсли;
		
		СтрокаРеквизиты = СтрокаМетаданных.Измерения.Добавить();
		СтрокаРеквизиты.Имя				= ОчиститьЛишниеСкобки(ИмяРеквизита);
		СтрокаРеквизиты.Синоним			= ОчиститьЛишниеСкобки(СинонимРеквизита);
		СтрокаРеквизиты.Идентификатор	= МассивИдентификатор[2];
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ДополнитьИнформациюПоТипуОбъекта_Ресурсы(СтрокаМетаданных, знач НастройкиМетаданных, знач ИнформацияОбОбъекте)
	Если ПустаяСтрока(НастройкиМетаданных.ИдентификаторРесурсы) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоРесурсов = СтрНайти(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторРесурсы);
	Если НачалоРесурсов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Область КоличествоРесурсов
	КоличествоРесурсов = 0;
	
	НачКолРесурсов = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоРесурсов, 1);
	КонКолРесурсов = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоРесурсов, 2);
	Если КонКолРесурсов > НачКолРесурсов Тогда
		СтрКолРесурсов = Сред(ИнформацияОбОбъекте, НачКолРесурсов + 1, КонКолРесурсов - НачКолРесурсов - 1);
		КоличествоРесурсов = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрКолРесурсов);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоРесурсов) Тогда
		Возврат;
	КонецЕсли;
	#КонецОбласти 
	
	КонецБлока		= СтрДлина(ИнформацияОбОбъекте);
	НачалоПозиции	= КонКолРесурсов + 1;
	Для Индекс = 1 По КоличествоРесурсов Цикл
		Если НачалоПозиции > КонецБлока Тогда
			Прервать;
		КонецЕсли;
		
		ОкончаниеБлока = 0;
		
		БлокРесурса = ПрочитатьИнформационныйБлок(ИнформацияОбОбъекте, НачалоПозиции, ОкончаниеБлока);
		Если ПустаяСтрока(БлокРесурса) Тогда
			Продолжить;
		КонецЕсли;
		НачалоПозиции = ОкончаниеБлока + 1;
		
		НачБлокаИдентификатор	= СтрНайти(БлокРесурса, "{",,, 6);
		КонБлокаИдентификатор	= 0;
		БлокИдентификатор		= ?(НачБлокаИдентификатор = 0, "", ПрочитатьИнформационныйБлок(БлокРесурса, НачБлокаИдентификатор, КонБлокаИдентификатор));
		МассивИдентификатор		= СтрРазделить(БлокИдентификатор, ",", Ложь);
		
		НачБлокаПредставление	= СтрНайти(БлокРесурса, "{",,, 7);
		КонБлокаПредставление	= 0;
		БлокПредставление		= ?(НачБлокаПредставление = 0, "", ПрочитатьИнформационныйБлок(БлокРесурса, НачБлокаПредставление, КонБлокаПредставление));
		МассивПредставление		= СтрРазделить(БлокПредставление, ",", Ложь);
		
		Если МассивИдентификатор.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(БлокРесурса, КонБлокаИдентификатор + 2, НачБлокаПредставление - КонБлокаИдентификатор - 4);
		Если МассивПредставление.Количество() >= 3 Тогда
			СинонимРеквизита = СтрЗаменить(МассивПредставление[2], "}", "");
		Иначе 
			СинонимРеквизита = ИмяРеквизита;
		КонецЕсли;
		
		СтрокаРеквизиты = СтрокаМетаданных.Ресурсы.Добавить();
		СтрокаРеквизиты.Имя				= ОчиститьЛишниеСкобки(ИмяРеквизита);
		СтрокаРеквизиты.Синоним			= ОчиститьЛишниеСкобки(СинонимРеквизита);
		СтрокаРеквизиты.Идентификатор	= МассивИдентификатор[2];
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ДополнитьИнформациюПоТипуОбъекта_Реквизиты(СтрокаМетаданных, знач НастройкиМетаданных, знач ИнформацияОбОбъекте)
	Если ПустаяСтрока(НастройкиМетаданных.ИдентификаторРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоРеквизиты = СтрНайти(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторРеквизиты);
	Если НачалоРеквизиты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Область КоличествоРеквизитов
	КоличествоРеквизитов = 0;
	
	НачКолРеквизитов = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоРеквизиты, 1);
	КонКолРеквизитов = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоРеквизиты, 2);
	Если КонКолРеквизитов > НачКолРеквизитов Тогда
		СтрКолРеквизитов = Сред(ИнформацияОбОбъекте, НачКолРеквизитов + 1, КонКолРеквизитов - НачКолРеквизитов - 1);
		КоличествоРеквизитов = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрКолРеквизитов);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	#КонецОбласти 
	
	КонецБлока		= СтрДлина(ИнформацияОбОбъекте);
	НачалоПозиции	= КонКолРеквизитов + 1;
	Для Индекс = 1 По КоличествоРеквизитов Цикл
		Если НачалоПозиции > КонецБлока Тогда
			Прервать;
		КонецЕсли;
		
		ОкончаниеБлока = 0;
		
		БлокРеквизита = ПрочитатьИнформационныйБлок(ИнформацияОбОбъекте, НачалоПозиции, ОкончаниеБлока);
		Если ПустаяСтрока(БлокРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		НачалоПозиции = ОкончаниеБлока + 1;
		
		НачБлокаИдентификатор	= СтрНайти(БлокРеквизита, "{",,, 6);
		КонБлокаИдентификатор	= 0;
		БлокИдентификатор		= ?(НачБлокаИдентификатор = 0, "", ПрочитатьИнформационныйБлок(БлокРеквизита, НачБлокаИдентификатор, КонБлокаИдентификатор));
		МассивИдентификатор		= СтрРазделить(БлокИдентификатор, ",", Ложь);
		
		НачБлокаПредставление	= СтрНайти(БлокРеквизита, "{",,, 7);
		КонБлокаПредставление	= 0;
		БлокПредставление		= ?(НачБлокаПредставление = 0, "", ПрочитатьИнформационныйБлок(БлокРеквизита, НачБлокаПредставление, КонБлокаПредставление));
		МассивПредставление		= СтрРазделить(БлокПредставление, ",", Ложь);
		
		Если МассивИдентификатор.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(БлокРеквизита, КонБлокаИдентификатор + 2, НачБлокаПредставление - КонБлокаИдентификатор - 4);
		Если МассивПредставление.Количество() >= 3 Тогда
			СинонимРеквизита = СтрЗаменить(МассивПредставление[2], "}", "");
		Иначе 
			СинонимРеквизита = ИмяРеквизита;
		КонецЕсли;
		
		СтрокаРеквизиты = СтрокаМетаданных.Реквизиты.Добавить();
		СтрокаРеквизиты.Имя				= ОчиститьЛишниеСкобки(ИмяРеквизита);
		СтрокаРеквизиты.Синоним			= ОчиститьЛишниеСкобки(СинонимРеквизита);
		СтрокаРеквизиты.Идентификатор	= МассивИдентификатор[2];
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ДополнитьИнформациюПоТипуОбъекта_Значения(СтрокаМетаданных, знач НастройкиМетаданных, знач ИнформацияОбОбъекте)
	Если ПустаяСтрока(НастройкиМетаданных.ИдентификаторЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоЗначения = СтрНайти(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторЗначения);
	Если НачалоЗначения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Область КоличествоЗначений
	КоличествоЗначений = 0;
	
	НачКолЗначений = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоЗначения, 1);
	КонКолЗначений = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоЗначения, 2);
	Если КонКолЗначений > НачКолЗначений Тогда
		СтрКолЗначений = Сред(ИнформацияОбОбъекте, НачКолЗначений + 1, КонКолЗначений - НачКолЗначений - 1);
		КоличествоЗначений = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрКолЗначений);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоЗначений) Тогда
		Возврат;
	КонецЕсли;
	#КонецОбласти 
	
	КонецБлока		= СтрДлина(ИнформацияОбОбъекте);
	НачалоПозиции	= КонКолЗначений + 1;
	Для Индекс = 1 По КоличествоЗначений Цикл
		Если НачалоПозиции > КонецБлока Тогда
			Прервать;
		КонецЕсли;
		
		ОкончаниеБлока = 0;
		
		БлокЗначения = ПрочитатьИнформационныйБлок(ИнформацияОбОбъекте, НачалоПозиции, ОкончаниеБлока);
		Если ПустаяСтрока(БлокЗначения) Тогда
			Продолжить;
		КонецЕсли;
		НачалоПозиции = ОкончаниеБлока + 1;
		
		НачБлокаИдентификатор	= СтрНайти(БлокЗначения, "{",,, 4);
		КонБлокаИдентификатор	= 0;
		БлокИдентификатор		= ?(НачБлокаИдентификатор = 0, "", ПрочитатьИнформационныйБлок(БлокЗначения, НачБлокаИдентификатор, КонБлокаИдентификатор));
		МассивИдентификатор		= СтрРазделить(БлокИдентификатор, ",", Ложь);
		
		НачБлокаПредставление	= СтрНайти(БлокЗначения, "{",,, 5);
		КонБлокаПредставление	= 0;
		БлокПредставление		= ?(НачБлокаПредставление = 0, "", ПрочитатьИнформационныйБлок(БлокЗначения, НачБлокаПредставление, КонБлокаПредставление));
		МассивПредставление		= СтрРазделить(БлокПредставление, ",", Ложь);
		
		Если МассивИдентификатор.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(БлокЗначения, КонБлокаИдентификатор + 2, НачБлокаПредставление - КонБлокаИдентификатор - 4);
		Если МассивПредставление.Количество() >= 3 Тогда
			СинонимРеквизита = СтрЗаменить(МассивПредставление[2], "}", "");
		Иначе 
			СинонимРеквизита = ИмяРеквизита;
		КонецЕсли;
		
		СтрокаЗначение = СтрокаМетаданных.Значения.Добавить();
		СтрокаЗначение.Имя				= ОчиститьЛишниеСкобки(ИмяРеквизита);
		СтрокаЗначение.Синоним			= ОчиститьЛишниеСкобки(СинонимРеквизита);
		СтрокаЗначение.Идентификатор	= МассивИдентификатор[2];
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоТипуОбъекта_ТабличныеЧасти(СтрокаМетаданных, знач НастройкиМетаданных, знач ИнформацияОбОбъекте)
	Если ПустаяСтрока(НастройкиМетаданных.ИдентификаторТабЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоТабЧасти = СтрНайти(ИнформацияОбОбъекте, НастройкиМетаданных.ИдентификаторТабЧасти);
	Если НачалоТабЧасти = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Область КоличествоТЧ
	КоличествоТЧ = 0;
	
	НачКолТабЧастей = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоТабЧасти, 1);
	КонКолТабЧастей = СтрНайти(ИнформацияОбОбъекте, ",",, НачалоТабЧасти, 2);
	Если КонКолТабЧастей > НачКолТабЧастей Тогда
		СтрКолТабЧастей = Сред(ИнформацияОбОбъекте, НачКолТабЧастей + 1, КонКолТабЧастей - НачКолТабЧастей - 1);
		КоличествоТЧ = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрКолТабЧастей);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоТЧ) Тогда
		Возврат;
	КонецЕсли;
	#КонецОбласти 
	
	КонецБлока		= СтрДлина(ИнформацияОбОбъекте);
	НачалоПозиции	= КонКолТабЧастей + 1;
	Для Индекс = 1 По КоличествоТЧ Цикл
		Если НачалоПозиции > КонецБлока Тогда
			Прервать;
		КонецЕсли;
		
		ОкончаниеБлока = 0;
		
		БлокТабличнойЧасти = ПрочитатьИнформационныйБлок(ИнформацияОбОбъекте, НачалоПозиции, ОкончаниеБлока);
		Если ПустаяСтрока(БлокТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		НачалоПозиции = ОкончаниеБлока + 1;
		
		НачБлокаИдентификатор	= СтрНайти(БлокТабличнойЧасти, "{",,, 6);
		КонБлокаИдентификатор	= 0;
		БлокИдентификатор		= ?(НачБлокаИдентификатор = 0, "", ПрочитатьИнформационныйБлок(БлокТабличнойЧасти, НачБлокаИдентификатор, КонБлокаИдентификатор));
		МассивИдентификатор		= СтрРазделить(БлокИдентификатор, ",", Ложь);
		
		НачБлокаПредставление	= СтрНайти(БлокТабличнойЧасти, "{",,, 7);
		КонБлокаПредставление	= 0;
		БлокПредставление		= ?(НачБлокаПредставление = 0, "", ПрочитатьИнформационныйБлок(БлокТабличнойЧасти, НачБлокаПредставление, КонБлокаПредставление));
		МассивПредставление		= СтрРазделить(БлокПредставление, ",", Ложь);
		
		Если МассивИдентификатор.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(БлокТабличнойЧасти, КонБлокаИдентификатор + 2, НачБлокаПредставление - КонБлокаИдентификатор - 4);
		Если МассивПредставление.Количество() >= 3 Тогда
			СинонимРеквизита = СтрЗаменить(МассивПредставление[2], "}", "");
		Иначе 
			СинонимРеквизита = ИмяРеквизита;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = СтрокаМетаданных.ТабличныеЧасти.Добавить();
		СтрокаТабличнойЧасти.Имя			= ОчиститьЛишниеСкобки(ИмяРеквизита);
		СтрокаТабличнойЧасти.Синоним		= ОчиститьЛишниеСкобки(СинонимРеквизита);
		СтрокаТабличнойЧасти.Идентификатор	= МассивИдентификатор[2];
		
		// дополним информацию о реквизита таб. части
		НастройкиМетаданныхТЧ = Новый Структура("ИдентификаторРеквизиты", НастройкиМетаданных.ИдентификаторРеквизитыТЧ);
		ДополнитьИнформациюПоТипуОбъекта_Реквизиты(СтрокаТабличнойЧасти, НастройкиМетаданныхТЧ, БлокТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ДополнитьПодчиненныеПодсистемы(знач СтрокаМетаданных, знач ИдентификаторИмя, знач ИнформацияОбОбъекте, знач МассивИнформации, знач МассивФайлов, знач МассивРасширений)
	Если НЕ СтрокаМетаданных.ИмяРодителя = "Subsystems" Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = НайтиПодчиненныеОбъектыПоИдентификатору(ИнформацияОбОбъекте, "37f2fa9a-b276-11d4-9435-004095e12fc7");
	ЗаполнитьТаблицуМетаданныхПоМассивуОбъектов(ИдентификаторИмя, МассивОбъектов, МассивИнформации, МассивФайлов, МассивРасширений, СтрокаМетаданных.ИдентификаторОбъекта);
КонецПроцедуры

&НаКлиенте 
Функция ДобавитьСтрокуТаблицыМетаданных(знач МассивФайлов, знач ИдентификаторРодителя, знач ИмяРодителя, знач ИдентификаторОбъекта, знач ИмяСиноним, знач ИдентификаторПодсистемы = "")
	ПолноеИмяФайла = МассивФайлов.Получить(ИдентификаторОбъекта);
	Если ПолноеИмяФайла = Неопределено И ИмяРодителя <> "ConfigName" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаМетаданных = ЭтотОбъект.ТаблицаМетаданных.Добавить();
	СтрокаМетаданных.ИдентификаторРодителя		= ИдентификаторРодителя;
	СтрокаМетаданных.ИмяРодителя				= ИмяРодителя;
	СтрокаМетаданных.ИдентификаторОбъекта		= ИдентификаторОбъекта;
	СтрокаМетаданных.ИмяОбъекта					= ИмяСиноним.Имя;
	СтрокаМетаданных.ПредставлениеОбъекта		= ИмяСиноним.Синоним;
	СтрокаМетаданных.ПутьКФайлу					= ПолноеИмяФайла;
	СтрокаМетаданных.ИдентификаторПодсистемы	= ИдентификаторПодсистемы;
	
	Возврат СтрокаМетаданных;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОтобразитьСодержимое

&НаКлиенте 
Асинх Процедура ОтобразитьСодержимоеМодуляФормы(СтрокаДанных)
	Если ПустаяСтрока(СтрокаДанных.ПутьКФайлу) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(СтрокаДанных.ПутьКФайлу);
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	ЭтоКаталог = Ложь;
	Если ФайлСуществует Тогда
		ЭтоКаталог = Ждать Файл.ЭтоКаталогАсинх();
	КонецЕсли;
	
	Если ЭтоКаталог Тогда
		ОтобразитьСодержимоеПакета(СтрокаДанных, "module");
		Возврат;
	КонецЕсли;
	
	ИнформацияОФорме = ПрочитатьДанныеФайла(СтрокаДанных.ПутьКФайлу);
	
	ДлинаСтроки		= 0;
	НачалоСтроки	= НайтиНачалоСтрокиМодуля(ИнформацияОФорме, ДлинаСтроки);
	Если НачалоСтроки = 0 Тогда
		ОтобразитьСодержимоеПакета(СтрокаДанных, "module");
		Возврат;
	КонецЕсли;
	
	КонецСтроки = СтрНайти(ИнформацияОФорме, "{4,",, НачалоСтроки + ДлинаСтроки);
	Если КонецСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМодуля = СокрЛП(Сред(ИнформацияОФорме, НачалоСтроки + ДлинаСтроки, КонецСтроки - НачалоСтроки - ДлинаСтроки));
	
	ТекстМодуля	= СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекстМодуля, """", "Слева");
	ТекстМодуля	= СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекстМодуля, ",", "Справа");
	ТекстМодуля	= СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекстМодуля, """", "Справа");
	
	Если ПроверитьТекстМодуля(ТекстМодуля) Тогда
		СтрокаДанных.ТекстДляОтображения	= ТекстМодуля;
		СтрокаДанных.ЭтоТекстМодуля			= Истина;
		
		ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
	Иначе 
		ОтобразитьСодержимоеПакета(СтрокаДанных, "module");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Асинх Процедура ОтобразитьСодержимоеПакета(знач СтрокаДанных, знач ВидДанных = "text")
	Если ПустаяСтрока(СтрокаДанных.ПутьКФайлу) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(СтрокаДанных.ПутьКФайлу);
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	ЭтоКаталог = Ложь;
	Если ФайлСуществует Тогда
		ЭтоКаталог = Ждать Файл.ЭтоКаталогАсинх();
	КонецЕсли;
	
	Если ЭтоКаталог Тогда
		КаталогРаспаковки = СтрокаДанных.ПутьКФайлу;
		СтрокаДанных.ПутьККаталогу_tmp = СтрокаДанных.ПутьКФайлу;
	Иначе 
		КаталогРаспаковки = СтрокаДанных.ПутьКФайлу + ".tmp";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаДанных.ПутьККаталогу_tmp) Тогда
		КомандаРаспаковка = СтрШаблон("""%1"" -parse ""%2"" ""%3""",
			ЭтотОбъект.ПутьКUnpackV8,
			СтрокаДанных.ПутьКФайлу,
			КаталогРаспаковки);
		
		Ждать ЗапуститьПриложениеАсинх(КомандаРаспаковка,, Истина);
	КонецЕсли;	
	
	НайденныеФайлы = Ждать НайтиФайлыАсинх(СтрокаДанных.ПутьККаталогу_tmp, "*");
	
	ЕстьНайденныеФайлы = (ТипЗнч(НайденныеФайлы) = Тип("Массив") И НайденныеФайлы.Количество() > 0);
	Если НЕ ЕстьНайденныеФайлы Тогда
		Если СтрокаДанных.Тип = "М" Тогда
			ОтобразитьСодержимоеМакета(СтрокаДанных);
		ИначеЕсли НЕ СтрокаДанных.Тип = "МФ" Тогда
			ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если Файл.ИмяБезРасширения = ВидДанных Тогда
			СтрокаДанных.ПутьКФайлуТХТ = Файл.ПолноеИмя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьИдентификатор() = СтрокаДанных.ПолучитьИдентификатор() Тогда
		ОтобразитьДанныеСтрокиДерева(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ОтобразитьСодержимоеСправки(СтрокаДанных)
	Если НЕ ПустаяСтрока(СтрокаДанных.ПутьКФайлуТХТ) Тогда
		ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
		Возврат;
	КонецЕсли;
	
	ИнформацияСправки = ПрочитатьДанныеФайла(СтрокаДанных.ПутьКФайлу);
	
	НачалоСтроки	= СтрНайти(ИнформацияСправки, "{#base64:", НаправлениеПоиска.СНачала);
	КонецСтроки		= СтрНайти(ИнформацияСправки, "}", НаправлениеПоиска.СНачала, НачалоСтроки + 1);
	
	СтрокаBase64	= Сред(ИнформацияСправки, НачалоСтроки + 9, КонецСтроки - НачалоСтроки - 9);
	ДвоичныеДанные	= Base64Значение(СтрокаBase64);
	Если НЕ ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуСправки = СтрокаДанных.ПутьКФайлу + ".htm";
	
	ДвоичныеДанные.Записать(ПутьКФайлуСправки);
	СтрокаДанных.ПутьКФайлуТХТ = ПутьКФайлуСправки;
	
	ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
КонецПроцедуры

&НаКлиенте 
Процедура ОтобразитьСодержимоеКартинки(СтрокаДанных)
	Если НЕ ПустаяСтрока(СтрокаДанных.ПутьКФайлуТХТ) Тогда
		ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
		Возврат;
	КонецЕсли;
	
	ИнформацияКартинки = ПрочитатьДанныеФайла(СтрокаДанных.ПутьКФайлу);
	
	НачалоСтроки	= СтрНайти(ИнформацияКартинки, "{#base64:", НаправлениеПоиска.СНачала);
	КонецСтроки		= СтрНайти(ИнформацияКартинки, "}", НаправлениеПоиска.СНачала, НачалоСтроки + 1);
	
	СтрокаBase64	= Сред(ИнформацияКартинки, НачалоСтроки + 9, КонецСтроки - НачалоСтроки - 9);
	ДвоичныеДанные	= Base64Значение(СтрокаBase64);
	Если НЕ ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.ПутьКФайлуТХТ = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
	ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
КонецПроцедуры

&НаКлиенте 
Процедура ОтобразитьСодержимоеМакета(СтрокаДанных)
	ТекстМакета = ПрочитатьДанныеФайла(СтрокаДанных.ПутьКФайлу, КодировкаТекста.UTF8);
	Если НЕ Лев(ТекстМакета, 6) = "MOXCEL" Тогда
		ПозицияXML = СтрНайти(ТекстМакета, "<?xml");
		Если ПозицияXML > 0 Тогда
			СтрокаДанных.ТекстДляОтображения = Сред(ТекстМакета, ПозицияXML);
		КонецЕсли;
		
		ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
		
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(СтрокаДанных.ПутьКФайлу);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
	
	Результат = СформироватьТабличныйДокументНаСервере(АдресХранилища);
	Если Результат Тогда
		СтрокаДанных.ПутьКФайлуТХТ = АдресХранилища;
	КонецЕсли;
	
	ОтобразитьДанныеСтрокиДерева(СтрокаДанных);
КонецПроцедуры

&НаКлиенте 
Функция НайтиНачалоСтрокиМодуля(знач ИнформацияОФорме, ДлинаСтроки)
	СтрокаПоискаНачало	= "{49,0}";
	СтрокаПоискаКонец	= "},""";
	НачалоСтроки		= СтрНайти(ИнформацияОФорме, СтрокаПоискаНачало, НаправлениеПоиска.СКонца);
	ДлинаСтроки			= СтрДлина(СтрокаПоискаНачало) - 1;
	Если НачалоСтроки <> 0 Тогда
		НачалоСтроки	= СтрНайти(ИнформацияОФорме, СтрокаПоискаКонец,, НачалоСтроки + СтрДлина(СтрокаПоискаНачало));
		ДлинаСтроки		= СтрДлина(СтрокаПоискаКонец);
	КонецЕсли;
	
	Если НачалоСтроки <> 0 Тогда
		Возврат НачалоСтроки;
	КонецЕсли;
	
	СтрокаПоискаНачало	= "{1,0},0},0,0,1,0,0,1,0,3,3";
	СтрокаПоискаКонец	= "},""";
	НачалоСтроки		= СтрНайти(ИнформацияОФорме, СтрокаПоискаНачало, НаправлениеПоиска.СКонца);
	ДлинаСтроки			= СтрДлина(СтрокаПоискаНачало) - 1;
	Если НачалоСтроки > 0 Тогда
		НачалоСтроки	= СтрНайти(ИнформацияОФорме, СтрокаПоискаКонец,, НачалоСтроки + СтрДлина(СтрокаПоискаНачало));
		ДлинаСтроки		= СтрДлина(СтрокаПоискаКонец);
	КонецЕсли;
	
	Если НачалоСтроки <> 0 Тогда
		Возврат НачалоСтроки;
	КонецЕсли;
	
	СтрокаПоискаНачало	= "{6,3,0,1}";
	СтрокаПоискаКонец	= "},""";
	НачалоСтроки		= СтрНайти(ИнформацияОФорме, СтрокаПоискаНачало, НаправлениеПоиска.СКонца);
	ДлинаСтроки			= СтрДлина(СтрокаПоискаНачало) - 1;
	Если НачалоСтроки > 0 Тогда
		НачалоСтроки	= СтрНайти(ИнформацияОФорме, СтрокаПоискаКонец,, НачалоСтроки + СтрДлина(СтрокаПоискаНачало));
		ДлинаСтроки		= СтрДлина(СтрокаПоискаКонец);
	КонецЕсли;
	
	Если НачалоСтроки <> 0 Тогда
		Возврат НачалоСтроки;
	КонецЕсли;
		
	Возврат 0;	
КонецФункции

&НаКлиенте
Функция ПроверитьТекстМодуля(знач ТекстМодуля)
	Возврат (СтрНайти(ТекстМодуля, НСтр("ru='&На'")) > 0
		ИЛИ СтрНайти(ТекстМодуля, НСтр("ru='Процедура'")) > 0
		ИЛИ СтрНайти(ТекстМодуля, НСтр("ru='Функция'")) > 0
		ИЛИ СтрНайти(ТекстМодуля, НСтр("ru='Перем'")) > 0
		ИЛИ СтрНайти(ТекстМодуля, НСтр("ru='Область'")) > 0);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КонсольКода

// Консоль кода реализована на базе обработки КонсольКода
// https://github.com/salexdv/bsl_console
// Версия 0.3.3 от 2022.10.14

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УправлениеТемами(Команда)
	
	УстановитьПометкуТемы(Команда.Имя);
	ИмяТемы = ПолучитьИмяТемы() + ?(Элементы.ПодсвечиватьЗапросы.Пометка, "-query", "");
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	Элементы.ПодсвечиватьЗапросы.Пометка = НЕ Элементы.ПодсвечиватьЗапросы.Пометка;
	ИмяТемы = ПолучитьИмяТемы() + ?(Элементы.ПодсвечиватьЗапросы.Пометка, "-query", "");
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	Элементы.КартаКода.Пометка = НЕ Элементы.КартаКода.Пометка;
	View().minimap(Элементы.КартаКода.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостояния(Команда)
	
	Элементы.СтрокаСостояния.Пометка = НЕ Элементы.СтрокаСостояния.Пометка;
	УправлениеВидимостьюСтрокиСостояния();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьПробелыИТабуляции(Команда)
	
	Элементы.ОтображатьПробелыИТабуляции.Пометка = НЕ Элементы.ОтображатьПробелыИТабуляции.Пометка;
	View().showStatusBar();
	УправлениеВидимостьюПробеловТабуляций();
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл()
	
	ИмяИндексногоФайла = Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + "_temp.html";
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ЭтотОбъект.кк_КаталогИсходников, ИмяИндексногоФайла);
	
КонецФункции
 
&НаКлиенте
Асинх Процедура ИзвлечьИсходники()
	КаталогФайлов = Ждать КаталогВременныхФайловАсинх();
	
	ЭтотОбъект.кк_КаталогИсходников = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогФайлов, "bsl_console");
	Ждать СоздатьКаталогАсинх(ЭтотОбъект.кк_КаталогИсходников);
	
	ФайлКаталога = Новый Файл(ЭтотОбъект.кк_КаталогИсходников);
	КаталогСуществует = Ждать ФайлКаталога.СуществуетАсинх();
	Если НЕ КаталогСуществует Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуВерсии = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ЭтотОбъект.кк_КаталогИсходников, ЭтотОбъект.кк_ВерсияОбработки + ".ver");
	
	ФайлВерсии = Новый Файл(ПутьКФайлуВерсии);
	ФайлСуществует = Ждать ФайлВерсии.СуществуетАсинх();
	Если НЕ ФайлСуществует Тогда
		Ждать УдалитьФайлыАсинх(ЭтотОбъект.кк_КаталогИсходников, "*.*");
		
		ПутьКФайлуАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ЭтотОбъект.кк_КаталогИсходников, "bsl_console.zip");
		ДанныеМакета = ПолучитьИзВременногоХранилища(ЭтотОбъект.кк_АдресМакета);
		Ждать ДанныеМакета.ЗаписатьАсинх(ПутьКФайлуАрхива);
		
		Файл = Новый ЧтениеZipФайла(ПутьКФайлуАрхива);
		Файл.ИзвлечьВсе(ЭтотОбъект.кк_КаталогИсходников);
		
		Файл = Новый ЗаписьТекста(ПутьКФайлуВерсии);
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
	КонецЕсли;

	ЭтотОбъект.кк_ИндексныйФайл = ИндексныйФайл();
	ПутьКФайлуИндекс = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ЭтотОбъект.кк_КаталогИсходников, "index.html");
	Ждать КопироватьФайлАсинх(ПутьКФайлуИндекс, ЭтотОбъект.кк_ИндексныйФайл);
	
	ЭтотОбъект.ТекстHTML = ЭтотОбъект.кк_ИндексныйФайл;
	ЭтотОбъект.кк_ИсходникиЗагружены = Истина;
	
	ЭтотОбъект.ИспользоватьКонсольКода = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	
	View().init(Инфо.ВерсияПриложения);
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);
	View().hideScrollX();
	View().hideScrollY();
	
	View().clearMetadata();
	
	УстановитьРежимРедактирования();
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View()
	
	Возврат Элементы.ТекстHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекстКонсоли(Текст, Позиция, УчитыватьОтступПервойСтроки)
	
	Если НЕ ЭтотОбъект.ИспользоватьКонсольКода Тогда
		Возврат;
	КонецЕсли;
	
	View().setReadOnly(Ложь);
	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	View().setReadOnly(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ОчиститьТекстКонсоли()
	
	Если НЕ ЭтотОбъект.ИспользоватьКонсольКода Тогда
		Возврат Ложь;
	КонецЕсли;
	
	View().setReadOnly(Ложь);
	Возврат View().eraseText();
	
КонецФункции

#КонецОбласти 

#Область РежимРаботы

&НаКлиенте
Процедура УстановитьРежимРедактирования()
	
	View().setLanguageMode("bsl");
	View().updateText("", Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	ЭтотОбъект.кк_РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТемы(Тема)
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = Тема);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	ИмяТемы = Неопределено;
	
	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТемы;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
	
	View().setTheme(Тема);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Если Элементы.СтрокаСостояния.Пометка Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций()

	View().renderWhitespace(Элементы.ОтображатьПробелыИТабуляции.Пометка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
